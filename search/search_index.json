{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"crosscomm/","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"CrossComm"},{"location":"crosscomm/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"crosscomm/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"crosscomm/#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"KRL/functions/","text":"System Functions \u00b6 System.String \u00b6 StrCopy \u00b6 Copy the contents of a string variable to another string variable. Parameters Parameter Value/Ref Type Description strDest[] IN CHAR[] The character string is copied to this string variable. Since `strDest[]` is an array of type `CHAR`, individual characters and constants are not permissible. strSource[] IN CHAR[] The contents of this string variable are copied. Return Type Description BOOL Returns true if the copy was successfull. Returns false otherwise. Comments The function StrCopy() can be used to copy the contents of a string variable to another string variable. Sample 1 2 3 4 5 6 DECL CHAR A [ 25 ] , B [ 25 ] DECL BOOL C A [] = \"\" B [] = \" Example \" C = StrCopy ( A [] , B []) > A [] = \" Example \" and C = true Set_KrlMsg \u00b6 Generate a message. Parameters Parameter Value/Ref Type Description type IN EKrlMsgType Defines the type of the message to be generated (#notify, #state, #quit, #waiting). msg OUT KrlMsg_T Structure defining the name, originator and message text params OUT KrlMsgPar_T Structure containing the message parameters options OUT KrlMsgOpt_T Structure containing the message reaction Return Type Description BOOL Returns true if the copy was successfull. Returns false otherwise. Comments The function Set_KrlMsg() generates a message. This means that the message is transferred to the message buffer and displayed from there in the message window. Exceptions: Notification messages are displayed in the message window by mean sof Set_KrlMsg(). They are not managed in the message buffer, however (\u201cfire and forget\u201d principle). To generate dialog messages, the function Set_KrlDlg() must be used. Sample 1 2 3 4 5 6 DECL CHAR A [ 25 ] , B [ 25 ] DECL BOOL C A [] = \"\" B [] = \" Example \" C = StrCopy ( A [] , B []) > A [] = \" Example \" and C = true","title":"System Functions"},{"location":"KRL/functions/#system-functions","text":"","title":"System Functions"},{"location":"KRL/functions/#systemstring","text":"","title":"System.String"},{"location":"KRL/functions/#strcopy","text":"Copy the contents of a string variable to another string variable. Parameters Parameter Value/Ref Type Description strDest[] IN CHAR[] The character string is copied to this string variable. Since `strDest[]` is an array of type `CHAR`, individual characters and constants are not permissible. strSource[] IN CHAR[] The contents of this string variable are copied. Return Type Description BOOL Returns true if the copy was successfull. Returns false otherwise. Comments The function StrCopy() can be used to copy the contents of a string variable to another string variable. Sample 1 2 3 4 5 6 DECL CHAR A [ 25 ] , B [ 25 ] DECL BOOL C A [] = \"\" B [] = \" Example \" C = StrCopy ( A [] , B []) > A [] = \" Example \" and C = true","title":"StrCopy"},{"location":"KRL/functions/#set_krlmsg","text":"Generate a message. Parameters Parameter Value/Ref Type Description type IN EKrlMsgType Defines the type of the message to be generated (#notify, #state, #quit, #waiting). msg OUT KrlMsg_T Structure defining the name, originator and message text params OUT KrlMsgPar_T Structure containing the message parameters options OUT KrlMsgOpt_T Structure containing the message reaction Return Type Description BOOL Returns true if the copy was successfull. Returns false otherwise. Comments The function Set_KrlMsg() generates a message. This means that the message is transferred to the message buffer and displayed from there in the message window. Exceptions: Notification messages are displayed in the message window by mean sof Set_KrlMsg(). They are not managed in the message buffer, however (\u201cfire and forget\u201d principle). To generate dialog messages, the function Set_KrlDlg() must be used. Sample 1 2 3 4 5 6 DECL CHAR A [ 25 ] , B [ 25 ] DECL BOOL C A [] = \"\" B [] = \" Example \" C = StrCopy ( A [] , B []) > A [] = \" Example \" and C = true","title":"Set_KrlMsg"},{"location":"KRL/types/","text":"System Types \u00b6 PRO_MODE \u00b6 Program run modes Name Data Type PRO_MODE ENUM Value Description #ISTEP Incremental Step : block-by-blockprocessing with a stop after each instruction (without advance run processing). #PSTEP Program Step: complete processing of subprograms (without advance run processing). #MSTEP Motion Step: step-by-step processing with a stop after each motion instruction (without advance run processing). #CSTEP Continuous Step: Step-by-step processing with a stop after each motion instruction (with advance run processing). #GO Continuous execution to the end of the program. #BSTEP Back Step: Continuous execution backwards to the start of the program. PRO_STATE \u00b6 Process states Name Data Type PRO_STATE ENUM Value Description #P_FREE Program not selected #P_RESET Program reset #P_ACTIVE Program active #P_STOP Program stopped #P_END End of program reached CP \u00b6 Speed/Acceleration data structure Name Data Type CP STRUC Field Type Description CP REAL ORI1 REAL ORI2 REAL PRO_IP \u00b6 Process pointer data structure Name Data Type PRO_IP STRUC Field Type Description I_EXECUTED BOOL `true` if the instruction is executed. `false` otherwise. NAME[] CHAR[32] Name of the block in the `ADVANCE` run NAME_C[] CHAR[32] Name of the block in the `MAIN` run P_ARRIVED INT Path status for the programmed point P_NAME[] CHAR[24] Name or aggregate of the end or auxiliary point SNR INT Block number in the `ADVANCE` run SNR_C INT Block number in the `MAIN` run EKrlMsgType \u00b6 Message types Name Data Type EKrlMsgType ENUM Value Description #NOTIFY Notification message #STATE Status message #QUIT Acknowledgment message #WAITING Wait message #DIALOG End of program reached KrlMsgParType_T \u00b6 Message parameter types Name Data Type KrlMsgParType_T ENUM Value Description #VALUE The parameter is inserted into the message text as specified in text, int, real or bool. #KEY The parameter is a key that must be searched for in the message database. #EMPTY The parameter is empty. KrlMsg_T \u00b6 Message data structure Name Data Type KrlMsg_T STRUC Field Type Description Modul[] CHAR[24] Originator displayed in the message window. Nr INT Message number. Message numbers may be used more than once. Msg_Txt[] CHAR[80] Message text (or key for a message database). KrlMsgPar_T \u00b6 Message parameter data structure Name Data Type KrlMsgPar_T STRUC Field Type Description Par_Type KrlMsgParType_T Type of parameter. Par_Txt[] CHAR[26] Text of the parameter (or key for a message database). Par_Int INT This can be used to fill the placeholder with an integer value. It can only be used in conjunction with type=#value. Par_Real REAL This can be used to fill the placeholder with a real value. It can only be used in conjunction with type=#value. Par_Bool BOOL This can be used to fill the placeholder with a Boolean value. It can only be used in conjunction with type=#value.","title":"System Types"},{"location":"KRL/types/#system-types","text":"","title":"System Types"},{"location":"KRL/types/#pro_mode","text":"Program run modes Name Data Type PRO_MODE ENUM Value Description #ISTEP Incremental Step : block-by-blockprocessing with a stop after each instruction (without advance run processing). #PSTEP Program Step: complete processing of subprograms (without advance run processing). #MSTEP Motion Step: step-by-step processing with a stop after each motion instruction (without advance run processing). #CSTEP Continuous Step: Step-by-step processing with a stop after each motion instruction (with advance run processing). #GO Continuous execution to the end of the program. #BSTEP Back Step: Continuous execution backwards to the start of the program.","title":"PRO_MODE"},{"location":"KRL/types/#pro_state","text":"Process states Name Data Type PRO_STATE ENUM Value Description #P_FREE Program not selected #P_RESET Program reset #P_ACTIVE Program active #P_STOP Program stopped #P_END End of program reached","title":"PRO_STATE"},{"location":"KRL/types/#cp","text":"Speed/Acceleration data structure Name Data Type CP STRUC Field Type Description CP REAL ORI1 REAL ORI2 REAL","title":"CP"},{"location":"KRL/types/#pro_ip","text":"Process pointer data structure Name Data Type PRO_IP STRUC Field Type Description I_EXECUTED BOOL `true` if the instruction is executed. `false` otherwise. NAME[] CHAR[32] Name of the block in the `ADVANCE` run NAME_C[] CHAR[32] Name of the block in the `MAIN` run P_ARRIVED INT Path status for the programmed point P_NAME[] CHAR[24] Name or aggregate of the end or auxiliary point SNR INT Block number in the `ADVANCE` run SNR_C INT Block number in the `MAIN` run","title":"PRO_IP"},{"location":"KRL/types/#ekrlmsgtype","text":"Message types Name Data Type EKrlMsgType ENUM Value Description #NOTIFY Notification message #STATE Status message #QUIT Acknowledgment message #WAITING Wait message #DIALOG End of program reached","title":"EKrlMsgType"},{"location":"KRL/types/#krlmsgpartype_t","text":"Message parameter types Name Data Type KrlMsgParType_T ENUM Value Description #VALUE The parameter is inserted into the message text as specified in text, int, real or bool. #KEY The parameter is a key that must be searched for in the message database. #EMPTY The parameter is empty.","title":"KrlMsgParType_T"},{"location":"KRL/types/#krlmsg_t","text":"Message data structure Name Data Type KrlMsg_T STRUC Field Type Description Modul[] CHAR[24] Originator displayed in the message window. Nr INT Message number. Message numbers may be used more than once. Msg_Txt[] CHAR[80] Message text (or key for a message database).","title":"KrlMsg_T"},{"location":"KRL/types/#krlmsgpar_t","text":"Message parameter data structure Name Data Type KrlMsgPar_T STRUC Field Type Description Par_Type KrlMsgParType_T Type of parameter. Par_Txt[] CHAR[26] Text of the parameter (or key for a message database). Par_Int INT This can be used to fill the placeholder with an integer value. It can only be used in conjunction with type=#value. Par_Real REAL This can be used to fill the placeholder with a real value. It can only be used in conjunction with type=#value. Par_Bool BOOL This can be used to fill the placeholder with a Boolean value. It can only be used in conjunction with type=#value.","title":"KrlMsgPar_T"},{"location":"KRL/variables/","text":"System Variables \u00b6 System.String \u00b6 $ACC \u00b6 Accelerations in the ADVANCE run Name Type $ACC STRUC : CP Field Description Type Unit Constraint $ACC . CP CP acceleration in the advance run REAL m/s 2 $ACC . ORI1 Swivel acceleration in the advance run REAL \u00b0/s 2 $ACC . ORI2 Rotational acceleration in the advance run REAL \u00b0/s 2 $ACC_C \u00b6 Accelerations in the MAIN run Name Type $ACC_C STRUC : CP Field Description Type Unit Constraint $ACC_C . CP CP acceleration in the main run REAL m/s 2 > 0 $ACC_C . ORI1 Swivel acceleration in the main run REAL \u00b0/s 2 $ACC_C . ORI2 Rotational acceleration in the main run REAL \u00b0/s 2 $ACC_EXTAX[] \u00b6 Acceleration of the external axes in the ADVANCE run Name Type Unit Constraint $ACC_EXTAX[] INT[6] % [0, 100] $ACC_CAR_STOP \u00b6 The robot can be stopped if $ACC_CAR_LIMIT is exceeded Name Type $ACC_CAR_STOP BOOL Value Description true Stop reaction is activated. false Stop reaction is desactivated. Info Activates or deactivates the stop reaction when the value specified in $ACC_CAR_LIMIT is exceeded. The values can only be modified by editing the machine data. $ACT_BASE \u00b6 Number of the current BASE system Name Type Unit Constraint $ACT_BASE INT id > 0 $OV_PRO \u00b6 Program override Name Type Unit Constraint $OV_PRO INT % [0, 100] Info Program override is the velocity of the robot during program execution. The program override is specified as a percentage of the programmed velocity. In T1 mode, the maximum velocity is 250 mm/s, irrespective of the value that is set. $PRO_MODE \u00b6 Program run mode dependent on $INTERPRETER Name Type Values $PRO_MODE ENUM : PRO_MODE #ISTEP, #PSTEP, #MSTEP, #CSTEP, #GO, #BSTEP $PRO_MODE0 \u00b6 Program run mode of the SUBMIT interpreter Name Type Values $PRO_MODE0 ENUM : PRO_MODE #ISTEP, #PSTEP, #MSTEP, #CSTEP, #GO, #BSTEP $PRO_MODE1 \u00b6 Program run mode of the ROBOT interpreter Name Type Values $PRO_MODE1 ENUM : PRO_MODE #ISTEP, #PSTEP, #MSTEP, #CSTEP, #GO, #BSTEP $PRO_STATE \u00b6 Process state dependent on $INTERPRETER Name Type Values $PRO_STATE ENUM : PRO_STATE #P_FREE, #P_RESET, #P_ACTIVE, #P_STOP, #P_END $PRO_STATE0 \u00b6 Process state of the SUBMIT interpreter Name Type Values $PRO_STATE0 ENUM : PRO_STATE #P_FREE, #P_RESET, #P_ACTIVE, #P_STOP, #P_END $PRO_STATE1 \u00b6 Process state of the ROBOT interpreter Name Type Values $PRO_STATE1 ENUM : PRO_STATE #P_FREE, #P_RESET, #P_ACTIVE, #P_STOP, #P_END $PRO_NAME[] \u00b6 Process name dependent on $INTERPRETER Name Type $PRO_NAME[] CHAR[24] $PRO_NAME0[] \u00b6 Process name of the SUBMIT interpreter Name Type $PRO_NAME0[] CHAR[24] $PRO_NAME1[] \u00b6 Process name of the ROBOT interpreter Name Type $PRO_NAME1[] CHAR[24] $PRO_IP \u00b6 Process pointer to current KRL process Name Type $PRO_IP STRUC : PRO_IP Field Description Type Unit Constraint $PRO_IP . I_EXECUTED true if the instruction is executed. false otherwise. BOOL $PRO_IP . NAME[] Name of the block in the ADVANCE run CHAR[32] $PRO_IP . NAME_C[] Name of the block in the MAIN run CHAR[32] $PRO_IP . P_ARRIVED Path status for the programmed point INT $PRO_IP . P_NAME[] Name or aggregate of the end or auxiliary point CHAR[24] $PRO_IP . SNR Block number in the ADVANCE run INT $PRO_IP . SNR_C Block number in the MAIN run INT $VEL \u00b6 Velocities in the advance run Name Type $VEL STRUC : CP Field Description Type Unit Constraint $VEL . CP CP velocity in the advance run REAL m/s > 0 $VEL . ORI1 Swivel velocity in the advance run REAL \u00b0/s $VEL . ORI2 Rotational velocity in the advance run REAL \u00b0/s","title":"System Variables"},{"location":"KRL/variables/#system-variables","text":"","title":"System Variables"},{"location":"KRL/variables/#systemstring","text":"","title":"System.String"},{"location":"KRL/variables/#acc","text":"Accelerations in the ADVANCE run Name Type $ACC STRUC : CP Field Description Type Unit Constraint $ACC . CP CP acceleration in the advance run REAL m/s 2 $ACC . ORI1 Swivel acceleration in the advance run REAL \u00b0/s 2 $ACC . ORI2 Rotational acceleration in the advance run REAL \u00b0/s 2","title":"$ACC"},{"location":"KRL/variables/#acc_c","text":"Accelerations in the MAIN run Name Type $ACC_C STRUC : CP Field Description Type Unit Constraint $ACC_C . CP CP acceleration in the main run REAL m/s 2 > 0 $ACC_C . ORI1 Swivel acceleration in the main run REAL \u00b0/s 2 $ACC_C . ORI2 Rotational acceleration in the main run REAL \u00b0/s 2","title":"$ACC_C"},{"location":"KRL/variables/#acc_extax","text":"Acceleration of the external axes in the ADVANCE run Name Type Unit Constraint $ACC_EXTAX[] INT[6] % [0, 100]","title":"$ACC_EXTAX[]"},{"location":"KRL/variables/#acc_car_stop","text":"The robot can be stopped if $ACC_CAR_LIMIT is exceeded Name Type $ACC_CAR_STOP BOOL Value Description true Stop reaction is activated. false Stop reaction is desactivated. Info Activates or deactivates the stop reaction when the value specified in $ACC_CAR_LIMIT is exceeded. The values can only be modified by editing the machine data.","title":"$ACC_CAR_STOP"},{"location":"KRL/variables/#act_base","text":"Number of the current BASE system Name Type Unit Constraint $ACT_BASE INT id > 0","title":"$ACT_BASE"},{"location":"KRL/variables/#ov_pro","text":"Program override Name Type Unit Constraint $OV_PRO INT % [0, 100] Info Program override is the velocity of the robot during program execution. The program override is specified as a percentage of the programmed velocity. In T1 mode, the maximum velocity is 250 mm/s, irrespective of the value that is set.","title":"$OV_PRO"},{"location":"KRL/variables/#pro_mode","text":"Program run mode dependent on $INTERPRETER Name Type Values $PRO_MODE ENUM : PRO_MODE #ISTEP, #PSTEP, #MSTEP, #CSTEP, #GO, #BSTEP","title":"$PRO_MODE"},{"location":"KRL/variables/#pro_mode0","text":"Program run mode of the SUBMIT interpreter Name Type Values $PRO_MODE0 ENUM : PRO_MODE #ISTEP, #PSTEP, #MSTEP, #CSTEP, #GO, #BSTEP","title":"$PRO_MODE0"},{"location":"KRL/variables/#pro_mode1","text":"Program run mode of the ROBOT interpreter Name Type Values $PRO_MODE1 ENUM : PRO_MODE #ISTEP, #PSTEP, #MSTEP, #CSTEP, #GO, #BSTEP","title":"$PRO_MODE1"},{"location":"KRL/variables/#pro_state","text":"Process state dependent on $INTERPRETER Name Type Values $PRO_STATE ENUM : PRO_STATE #P_FREE, #P_RESET, #P_ACTIVE, #P_STOP, #P_END","title":"$PRO_STATE"},{"location":"KRL/variables/#pro_state0","text":"Process state of the SUBMIT interpreter Name Type Values $PRO_STATE0 ENUM : PRO_STATE #P_FREE, #P_RESET, #P_ACTIVE, #P_STOP, #P_END","title":"$PRO_STATE0"},{"location":"KRL/variables/#pro_state1","text":"Process state of the ROBOT interpreter Name Type Values $PRO_STATE1 ENUM : PRO_STATE #P_FREE, #P_RESET, #P_ACTIVE, #P_STOP, #P_END","title":"$PRO_STATE1"},{"location":"KRL/variables/#pro_name","text":"Process name dependent on $INTERPRETER Name Type $PRO_NAME[] CHAR[24]","title":"$PRO_NAME[]"},{"location":"KRL/variables/#pro_name0","text":"Process name of the SUBMIT interpreter Name Type $PRO_NAME0[] CHAR[24]","title":"$PRO_NAME0[]"},{"location":"KRL/variables/#pro_name1","text":"Process name of the ROBOT interpreter Name Type $PRO_NAME1[] CHAR[24]","title":"$PRO_NAME1[]"},{"location":"KRL/variables/#pro_ip","text":"Process pointer to current KRL process Name Type $PRO_IP STRUC : PRO_IP Field Description Type Unit Constraint $PRO_IP . I_EXECUTED true if the instruction is executed. false otherwise. BOOL $PRO_IP . NAME[] Name of the block in the ADVANCE run CHAR[32] $PRO_IP . NAME_C[] Name of the block in the MAIN run CHAR[32] $PRO_IP . P_ARRIVED Path status for the programmed point INT $PRO_IP . P_NAME[] Name or aggregate of the end or auxiliary point CHAR[24] $PRO_IP . SNR Block number in the ADVANCE run INT $PRO_IP . SNR_C Block number in the MAIN run INT","title":"$PRO_IP"},{"location":"KRL/variables/#vel","text":"Velocities in the advance run Name Type $VEL STRUC : CP Field Description Type Unit Constraint $VEL . CP CP velocity in the advance run REAL m/s > 0 $VEL . ORI1 Swivel velocity in the advance run REAL \u00b0/s $VEL . ORI2 Rotational velocity in the advance run REAL \u00b0/s","title":"$VEL"}]}