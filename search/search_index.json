{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to OpenKuka \u00b6 Better Kuka Robot Language documentation \u00b6 This website is a community effort to provide better documentation for the Kuka Robot Language (KRL). Its goal is to become a shared tool for robot developers (industrial, researcher, student, ...). Quick start \u00b6 Go to the language reference section to get started. Or hit the s or f key on your keyboard to search for a KRL entry. What to expect \u00b6 full language reference documentation in a modern html layout with powerful search capabilities and cross referencing additional resources (how to, tutorials, ...) discover undocumented functionalities (crosscomm plugin, message database, ...) easy to contribute Contributing \u00b6 All types of contributions are more than welcome. The language reference documentation is written in simple YAML files. A side each item (type, variable or function) you will find a small pencil icon that will redirect you to the corresponding definition lines in the yaml file. This way, it should be easy for anybody to propose corrections and enrichments of the existing documentation. Please, read the guidelines if you are decided to collaborate.","title":"Home"},{"location":"#welcome-to-openkuka","text":"","title":"Welcome to OpenKuka"},{"location":"#better-kuka-robot-language-documentation","text":"This website is a community effort to provide better documentation for the Kuka Robot Language (KRL). Its goal is to become a shared tool for robot developers (industrial, researcher, student, ...).","title":"Better Kuka Robot Language documentation"},{"location":"#quick-start","text":"Go to the language reference section to get started. Or hit the s or f key on your keyboard to search for a KRL entry.","title":"Quick start"},{"location":"#what-to-expect","text":"full language reference documentation in a modern html layout with powerful search capabilities and cross referencing additional resources (how to, tutorials, ...) discover undocumented functionalities (crosscomm plugin, message database, ...) easy to contribute","title":"What to expect"},{"location":"#contributing","text":"All types of contributions are more than welcome. The language reference documentation is written in simple YAML files. A side each item (type, variable or function) you will find a small pencil icon that will redirect you to the corresponding definition lines in the yaml file. This way, it should be easy for anybody to propose corrections and enrichments of the existing documentation. Please, read the guidelines if you are decided to collaborate.","title":"Contributing"},{"location":"authors/","text":"Hi, I'm Lionel ( @lionpeloux ) \u00b6 I'm a freelance structural engineer, researcher and entrepreneur from Lyon, France. I've come to robot programming recently for one of my clients, a small stonecutting workshop equipped with a KR-500-2MT . Because of my background in other areas, I see the power of community-based knowledge and I do believe that shared knowledge brings more value in almost any scenarios. Why this website ? \u00b6 Lots of people are complaining (understandably) about the quality of the documentation provided by Kuka to its customers. Indeed we are often left with a bunch of crappy pdf documents, sometimes outdated, sometimes incorrect, sometimes incomplete ... For a billion dollar company I find this is quite unfair (personal opinion !). So I wanted to build a modern documentation website to provide a better access to the language reference with powerful search and cross referencing capabilities. There is already a great source of support through the Kuka Robot Forum . However, forums are not so great to provide structured content, which this site is all about. Though, they should complete well.","title":"Author's notes"},{"location":"authors/#hi-im-lionel-lionpeloux","text":"I'm a freelance structural engineer, researcher and entrepreneur from Lyon, France. I've come to robot programming recently for one of my clients, a small stonecutting workshop equipped with a KR-500-2MT . Because of my background in other areas, I see the power of community-based knowledge and I do believe that shared knowledge brings more value in almost any scenarios.","title":"Hi, I'm Lionel (@lionpeloux)"},{"location":"authors/#why-this-website","text":"Lots of people are complaining (understandably) about the quality of the documentation provided by Kuka to its customers. Indeed we are often left with a bunch of crappy pdf documents, sometimes outdated, sometimes incorrect, sometimes incomplete ... For a billion dollar company I find this is quite unfair (personal opinion !). So I wanted to build a modern documentation website to provide a better access to the language reference with powerful search and cross referencing capabilities. There is already a great source of support through the Kuka Robot Forum . However, forums are not so great to provide structured content, which this site is all about. Though, they should complete well.","title":"Why this website ?"},{"location":"contributing/","text":"Interested in contributing to this documentation ? Want to report a bug ? Before you do, please read the following guidelines. Submission context \u00b6 Got a question or problem ? \u00b6 For quick questions there's no need to open an issue as you can reach us on gitter.im . Found a bug ? \u00b6 If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository . Even better, you can submit a pull request with a fix. However, before doing so, please read the submission guidelines. Missing a feature ? \u00b6 You can request a new feature by submitting an issue to our GitHub repository. If you would like to implement a new feature, please submit an issue with a proposal for your work first, to be sure that it is of use for everyone. Please consider what kind of change it is: For a major feature, first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small features and bugs can be crafted and directly submitted as a Pull Request. However, there is no guarantee that your feature will make it into the master, as it's always a matter of opinion whether if benefits the overall functionality of the theme.","title":"Contributing"},{"location":"contributing/#submission-context","text":"","title":"Submission context"},{"location":"contributing/#got-a-question-or-problem","text":"For quick questions there's no need to open an issue as you can reach us on gitter.im .","title":"Got a question or problem ?"},{"location":"contributing/#found-a-bug","text":"If you found a bug in the source code, you can help us by submitting an issue to the issue tracker in our GitHub repository . Even better, you can submit a pull request with a fix. However, before doing so, please read the submission guidelines.","title":"Found a bug ?"},{"location":"contributing/#missing-a-feature","text":"You can request a new feature by submitting an issue to our GitHub repository. If you would like to implement a new feature, please submit an issue with a proposal for your work first, to be sure that it is of use for everyone. Please consider what kind of change it is: For a major feature, first open an issue and outline your proposal so that it can be discussed. This will also allow us to better coordinate our efforts, prevent duplication of work, and help you to craft the change so that it is successfully accepted into the project. Small features and bugs can be crafted and directly submitted as a Pull Request. However, there is no guarantee that your feature will make it into the master, as it's always a matter of opinion whether if benefits the overall functionality of the theme.","title":"Missing a feature ?"},{"location":"krl/reference/system.functions/","text":"System.Functions \u00b6 Functions \u00b6 \ue3c9 StrCopy \u00b6 Copy the contents of a string variable to another string variable. Parameters Parameter Type Value/Ref Description strDest[] CHAR[] IN The character string is copied to this string variable. Since strDest[] is an array of type CHAR , individual characters and constants are not permissible. strSource[] CHAR[] IN The contents of this string variable are copied. Return Type Description BOOL Returns true if the copy was successfull. Returns false otherwise. Comments ... Notes The function StrCopy() can be used to copy the contents of a string variable to another string variable. Code Sample KRL 1 2 3 4 5 DECL CHAR A [ 25 ] , B [ 25 ] DECL BOOL C A [] = \"\" B [] = \" Example \" C = StrCopy ( A [] , B []) Output 1 2 A[] = \"Example\" and C = true function withTitleAttributeContent(tippy) { return (targets, options = {}) => tippy(targets, { ...options, content(reference) { if (options.content) { return options.content } const title = reference.getAttribute('title') reference.removeAttribute('title') return title } }) } window.tippy = withTitleAttributeContent(tippy) tippy('.tippy', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, }) tippy('.tippy-toc', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, })","title":"System.Functions"},{"location":"krl/reference/system.functions/#systemfunctions","text":"","title":"System.Functions"},{"location":"krl/reference/system.functions/#functions","text":"\ue3c9","title":"Functions"},{"location":"krl/reference/system.functions/#strcopy","text":"Copy the contents of a string variable to another string variable. Parameters Parameter Type Value/Ref Description strDest[] CHAR[] IN The character string is copied to this string variable. Since strDest[] is an array of type CHAR , individual characters and constants are not permissible. strSource[] CHAR[] IN The contents of this string variable are copied. Return Type Description BOOL Returns true if the copy was successfull. Returns false otherwise. Comments ... Notes The function StrCopy() can be used to copy the contents of a string variable to another string variable. Code Sample KRL 1 2 3 4 5 DECL CHAR A [ 25 ] , B [ 25 ] DECL BOOL C A [] = \"\" B [] = \" Example \" C = StrCopy ( A [] , B []) Output 1 2 A[] = \"Example\" and C = true function withTitleAttributeContent(tippy) { return (targets, options = {}) => tippy(targets, { ...options, content(reference) { if (options.content) { return options.content } const title = reference.getAttribute('title') reference.removeAttribute('title') return title } }) } window.tippy = withTitleAttributeContent(tippy) tippy('.tippy', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, }) tippy('.tippy-toc', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, })","title":"StrCopy"},{"location":"krl/reference/system.machinedata/","text":"","title":"System.machinedata"},{"location":"krl/reference/system.messages/","text":"System.Messages \u00b6 Programming messages in KRL. Enum Types \u00b6 \ue3c9 EKrlMsgType \u00b6 Message types Name Type EKrlMsgType ENUM Value Description #NOTIFY Notification message #STATE Status message #QUIT Acknowledgment message #WAITING Wait message #DIALOG End of program reached \ue3c9 KrlMsgParType_T \u00b6 Message parameter types Name Type KrlMsgParType_T ENUM Value Description #VALUE The parameter is inserted into the message text as specified in text, int, real or bool. #KEY The parameter is a key that must be searched for in the message database. #EMPTY The parameter is empty. \ue3c9 MsgBufMsgType_T \u00b6 Message parameter types Name Type MsgBufMsgType_T ENUM Value Description #SYS_QUIT Acknowledgement messages from the kernel system #SYS_STATE Status messages from the kernel system #USR_QUIT User-defined acknowledgement messages #USR_WAIT User-defined wait messages #USR_STATE User-defined status messages #USR_DLG User-defined dialog messages Struc Types \u00b6 \ue3c9 KrlMsg_T \u00b6 Message data structure Name Type KrlMsg_T STRUC Field Type Description Modul[] CHAR[24] Originator displayed in the message window. Nr INT Message number. Message numbers may be used more than once. Msg_Txt[] CHAR[80] Message text (or key for a message database). \ue3c9 KrlMsgDlgSK_T \u00b6 Softkey data structure for dialog message Name Type KrlMsgDlgSK_T STRUC Field Type Description Sk_Type KrlMsgParType_T The type of the softkey. Sk_Txt CHAR[10] Label of the softkey (or key for a message database). \ue3c9 KrlMsgOpt_T \u00b6 Message options data structure Name Type KrlMsgOpt_T STRUC Field Type Description Vl_Stop BOOL If true Set_KrlMsg() or Set_KrlDlg() trigger an ADVANCE run stop. Default to true . Clear_P_Reset BOOL If true delete messages when the program is reset or deselected. In that case, all status messages, acknowledgement messages and wait messages generated by Set_KrlMsg() with the variable options are deleted. Notification messages can only be deleted using the softkeys Ackn. and Ackn. All. For dialog messages Clear_P_Reset si always set to true . Clear_P_Saw BOOL Delete message when a block selection is carried out using the softkey Line Sel . If true all status messages, acknowledgement messages and wait messages generated by Set_KrlMsg() with the variable options are deleted. Default to false . Notification messages can only be deleted using the softkeys Ackn. and Ackn. All. For dialog messages no block selection is possible while a dialog is present on the KUKA.HMI, as all operator control elements are deactivated. Log_To_DB BOOL If true the message is logged. Default to false . \ue3c9 KrlMsgPar_T \u00b6 Message parameter data structure Name Type KrlMsgPar_T STRUC Field Type Description Par_Type KrlMsgParType_T Type of parameter. Par_Txt[] CHAR[26] Text of the parameter (or key for a message database). Par_Int INT This can be used to fill the placeholder with an integer value. It can only be used in conjunction with type=#value. Par_Real REAL This can be used to fill the placeholder with a real value. It can only be used in conjunction with type=#value. Par_Bool BOOL This can be used to fill the placeholder with a Boolean value. It can only be used in conjunction with type=#value. \ue3c9 MsgBuf_T \u00b6 Message buffer data structure Name Type MsgBuf_T STRUC Field Type Description Type MsgBufMsgType_T Message type. Nr INT Message number. Modul[] CHAR[24] Represents the originator of the message. Only initialized for messages of type #usr_... , because with type #sys_... the parameter is usually a database key that cannot be used by the user. Msg_Txt[] CHAR[80] Message text or message database key. Only initialized for messages of type #usr_... , because with type #sys_... the parameter is usually a database key that cannot be used by the user. Par_Type1 KrlMsgParType_T Parameter type. Par_Txt1[] CHAR[40] Text or database key of the parameter. Par_Type2 KrlMsgParType_T Parameter type. Par_Txt2[] CHAR[40] Text or database key of the parameter. Par_Type2 KrlMsgParType_T Parameter type. Par_Txt2[] CHAR[40] Text or database key of the parameter. Handle INT internal handle for this message (only initialized for user-defined messages). Comments ... Notes Array of buffer elements containing all the messages in the buffer. The array is filled in ascending order, without gaps, starting with Index = 1 . If there are fewer messages in the buffer than represented by the size of the array, these array elements are not initialized. Functions \u00b6 \ue3c9 Clear_KrlMsg \u00b6 Delete a a specific message. Parameters Parameter Type Value/Ref Description handle INT IN The handle of the message to delete. This handle is returned by the function Set_KrlMsg() . Return Type Description BOOL true if the message was sucessfully deleted. false otherwise Comments ... Notes The function Clear_KrlMsg() can be used to delete a message. This means that the message is removed from the message buffer and the message window. Notification messages cannot be deleted in this way, as they are not managed in the message buffer. Notification messages can only be deleted via the KUKA.HMI using the softkeys Ackn. and Ackn. All. -1 : all messages initiated by this process are deleted. -99 : all user-defined messages are deleted (for all processes: ROBOT , SUBMIT and COMMAND interpreters). \ue3c9 Exists_KrlDlg \u00b6 Checks whether a specific dialog message still exists. Parameters Parameter Type Value/Ref Description handle INT IN The handle provided for the dialog message by the function Set_KrlDlg() . answer INT OUT Number 1..7 of the softkey used to answer the dialog. 0 if the dialog was deleted before answering. Return Type Description BOOL true if the dialog message still exists in the message buffer. false if the dialog message no longer exists in the message buffer and has therefore been answered Comments ... Notes The function Exists_KrlDlg() can be used to check whether a specific dialog still exists. It also checks whether this dialog is still present in the message buffer. The function does not wait until the dialog has been deleted, but merely searches the buffer for the dialog with this handle. The KRL program must therefore be polled cyclically until the dialog has been answered or deleted. Returns 1..7 : answer with the corresponding softkey. 0 : the dialog has not been answered,but deleted (e.g. the dialog has been deleted by means of Clear_KrlMsg() by an interrupt or by a different process). \ue3c9 Exists_KrlMsg \u00b6 Checks whether a specific message still exists. Parameters Parameter Type Value/Ref Description handle INT IN The handle provided for the message by the function Set_KrlMsg() . Return Type Description BOOL Returns true if the message still exists in the message buffer. Comments ... Notes The function Exists_KrlMsg() can be used to check whether a specific message still exists. It also checks whether this message is still present in the message buffer. This means that the message is transferred to the message buffer and displayed from there in the message window. The function does not wait until the message has been deleted, but merely searches the buffer for the message with this handle. The KRL program must therefore be polled cyclically until the message has been deleted. Notification messages cannot be checked, as they are not managed in the message buffer. \ue3c9 Get_MsgBuffer \u00b6 Copy the content of the message buffer. Parameters Parameter Type Value/Ref Description msgBuf[] MsgBuf_T [100] OUT Array of buffer elements containing all the messages in the buffer Return Type Description INT Returns the number of messages in the message buffer. Comments ... Notes The function Get_MsgBuffer() reads the message buffer and writes the messages in the buffer to the OUT parameter msgBuff[] . The size of the buffer is 100 . Get_MsgBuffer() can read the following message types from the buffer : Status messages from the kernel system (#sys_state) Acknowledgement messages from the kernel system (#sys_quit) User-defined status messages (#usr_state) User-defined acknowledgement messages (#usr_quit) User-defined dialog messages (#usr_dlg) User-defined wait messages (#usr_wait) \ue3c9 Set_KrlDlg \u00b6 Generates a dialog message. Parameters Parameter Type Value/Ref Description msg KrlMsg_T OUT Structure defining the name, originator and message text. params KrlMsgPar_T OUT Structure containing the message parameters. softkey KrlMsgDlgSK_T OUT Structure containing the softkey assignment. options KrlMsgOpt_T OUT Structure containing the message reaction. Return Type Description INT Returns a handle to the generated dialog message. handle > 0 on success handle = -1 on failure Comments ... Notes The function Set_KrlDlg() generates a dialog message. This means that the message is transferred to the message buffer and displayed from there in the message window. The function merely generates the dialog. It does not wait until the dialog has been answered. A dialog cannot be generated until no other dialog is active. \ue3c9 Set_KrlMsg \u00b6 Generate a message. Parameters Parameter Type Value/Ref Description type EKrlMsgType IN Defines the type of the message to be generated ( #notify , #state , #quit , #waiting ). msg KrlMsg_T OUT Structure defining the name, originator and message text params KrlMsgPar_T OUT Structure containing the message parameters options KrlMsgOpt_T OUT Structure containing the message reaction Return Type Description INT Returns a handle to the generated message. handle > 0 on success, handle = -1 on failure. Comments ... Notes The function Set_KrlMsg() generates a message. This means that the message is transferred to the message buffer and displayed from there in the message window. Return -1 : The message could not be generated (e.g.because the message buffer is too full). >0 : The message was generated successfully. The return value is a valid handle that can be used for further operations for this message, e.g. for deleting the message with Clear_KrlMsg() . No handle is required for notification messages. Exceptions Notification messages are displayed in the message window by means of Set_KrlMsg(). They are not managed in the message buffer, however (\u201cfire and forget\u201d principle). To generate dialog messages, the function Set_KrlDlg() must be used. function withTitleAttributeContent(tippy) { return (targets, options = {}) => tippy(targets, { ...options, content(reference) { if (options.content) { return options.content } const title = reference.getAttribute('title') reference.removeAttribute('title') return title } }) } window.tippy = withTitleAttributeContent(tippy) tippy('.tippy', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, }) tippy('.tippy-toc', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, })","title":"System.Messages"},{"location":"krl/reference/system.messages/#systemmessages","text":"Programming messages in KRL.","title":"System.Messages"},{"location":"krl/reference/system.messages/#enum-types","text":"\ue3c9","title":"Enum Types"},{"location":"krl/reference/system.messages/#ekrlmsgtype","text":"Message types Name Type EKrlMsgType ENUM Value Description #NOTIFY Notification message #STATE Status message #QUIT Acknowledgment message #WAITING Wait message #DIALOG End of program reached \ue3c9","title":"EKrlMsgType"},{"location":"krl/reference/system.messages/#krlmsgpartype_t","text":"Message parameter types Name Type KrlMsgParType_T ENUM Value Description #VALUE The parameter is inserted into the message text as specified in text, int, real or bool. #KEY The parameter is a key that must be searched for in the message database. #EMPTY The parameter is empty. \ue3c9","title":"KrlMsgParType_T"},{"location":"krl/reference/system.messages/#msgbufmsgtype_t","text":"Message parameter types Name Type MsgBufMsgType_T ENUM Value Description #SYS_QUIT Acknowledgement messages from the kernel system #SYS_STATE Status messages from the kernel system #USR_QUIT User-defined acknowledgement messages #USR_WAIT User-defined wait messages #USR_STATE User-defined status messages #USR_DLG User-defined dialog messages","title":"MsgBufMsgType_T"},{"location":"krl/reference/system.messages/#struc-types","text":"\ue3c9","title":"Struc Types"},{"location":"krl/reference/system.messages/#krlmsg_t","text":"Message data structure Name Type KrlMsg_T STRUC Field Type Description Modul[] CHAR[24] Originator displayed in the message window. Nr INT Message number. Message numbers may be used more than once. Msg_Txt[] CHAR[80] Message text (or key for a message database). \ue3c9","title":"KrlMsg_T"},{"location":"krl/reference/system.messages/#krlmsgdlgsk_t","text":"Softkey data structure for dialog message Name Type KrlMsgDlgSK_T STRUC Field Type Description Sk_Type KrlMsgParType_T The type of the softkey. Sk_Txt CHAR[10] Label of the softkey (or key for a message database). \ue3c9","title":"KrlMsgDlgSK_T"},{"location":"krl/reference/system.messages/#krlmsgopt_t","text":"Message options data structure Name Type KrlMsgOpt_T STRUC Field Type Description Vl_Stop BOOL If true Set_KrlMsg() or Set_KrlDlg() trigger an ADVANCE run stop. Default to true . Clear_P_Reset BOOL If true delete messages when the program is reset or deselected. In that case, all status messages, acknowledgement messages and wait messages generated by Set_KrlMsg() with the variable options are deleted. Notification messages can only be deleted using the softkeys Ackn. and Ackn. All. For dialog messages Clear_P_Reset si always set to true . Clear_P_Saw BOOL Delete message when a block selection is carried out using the softkey Line Sel . If true all status messages, acknowledgement messages and wait messages generated by Set_KrlMsg() with the variable options are deleted. Default to false . Notification messages can only be deleted using the softkeys Ackn. and Ackn. All. For dialog messages no block selection is possible while a dialog is present on the KUKA.HMI, as all operator control elements are deactivated. Log_To_DB BOOL If true the message is logged. Default to false . \ue3c9","title":"KrlMsgOpt_T"},{"location":"krl/reference/system.messages/#krlmsgpar_t","text":"Message parameter data structure Name Type KrlMsgPar_T STRUC Field Type Description Par_Type KrlMsgParType_T Type of parameter. Par_Txt[] CHAR[26] Text of the parameter (or key for a message database). Par_Int INT This can be used to fill the placeholder with an integer value. It can only be used in conjunction with type=#value. Par_Real REAL This can be used to fill the placeholder with a real value. It can only be used in conjunction with type=#value. Par_Bool BOOL This can be used to fill the placeholder with a Boolean value. It can only be used in conjunction with type=#value. \ue3c9","title":"KrlMsgPar_T"},{"location":"krl/reference/system.messages/#msgbuf_t","text":"Message buffer data structure Name Type MsgBuf_T STRUC Field Type Description Type MsgBufMsgType_T Message type. Nr INT Message number. Modul[] CHAR[24] Represents the originator of the message. Only initialized for messages of type #usr_... , because with type #sys_... the parameter is usually a database key that cannot be used by the user. Msg_Txt[] CHAR[80] Message text or message database key. Only initialized for messages of type #usr_... , because with type #sys_... the parameter is usually a database key that cannot be used by the user. Par_Type1 KrlMsgParType_T Parameter type. Par_Txt1[] CHAR[40] Text or database key of the parameter. Par_Type2 KrlMsgParType_T Parameter type. Par_Txt2[] CHAR[40] Text or database key of the parameter. Par_Type2 KrlMsgParType_T Parameter type. Par_Txt2[] CHAR[40] Text or database key of the parameter. Handle INT internal handle for this message (only initialized for user-defined messages). Comments ... Notes Array of buffer elements containing all the messages in the buffer. The array is filled in ascending order, without gaps, starting with Index = 1 . If there are fewer messages in the buffer than represented by the size of the array, these array elements are not initialized.","title":"MsgBuf_T"},{"location":"krl/reference/system.messages/#functions","text":"\ue3c9","title":"Functions"},{"location":"krl/reference/system.messages/#clear_krlmsg","text":"Delete a a specific message. Parameters Parameter Type Value/Ref Description handle INT IN The handle of the message to delete. This handle is returned by the function Set_KrlMsg() . Return Type Description BOOL true if the message was sucessfully deleted. false otherwise Comments ... Notes The function Clear_KrlMsg() can be used to delete a message. This means that the message is removed from the message buffer and the message window. Notification messages cannot be deleted in this way, as they are not managed in the message buffer. Notification messages can only be deleted via the KUKA.HMI using the softkeys Ackn. and Ackn. All. -1 : all messages initiated by this process are deleted. -99 : all user-defined messages are deleted (for all processes: ROBOT , SUBMIT and COMMAND interpreters). \ue3c9","title":"Clear_KrlMsg"},{"location":"krl/reference/system.messages/#exists_krldlg","text":"Checks whether a specific dialog message still exists. Parameters Parameter Type Value/Ref Description handle INT IN The handle provided for the dialog message by the function Set_KrlDlg() . answer INT OUT Number 1..7 of the softkey used to answer the dialog. 0 if the dialog was deleted before answering. Return Type Description BOOL true if the dialog message still exists in the message buffer. false if the dialog message no longer exists in the message buffer and has therefore been answered Comments ... Notes The function Exists_KrlDlg() can be used to check whether a specific dialog still exists. It also checks whether this dialog is still present in the message buffer. The function does not wait until the dialog has been deleted, but merely searches the buffer for the dialog with this handle. The KRL program must therefore be polled cyclically until the dialog has been answered or deleted. Returns 1..7 : answer with the corresponding softkey. 0 : the dialog has not been answered,but deleted (e.g. the dialog has been deleted by means of Clear_KrlMsg() by an interrupt or by a different process). \ue3c9","title":"Exists_KrlDlg"},{"location":"krl/reference/system.messages/#exists_krlmsg","text":"Checks whether a specific message still exists. Parameters Parameter Type Value/Ref Description handle INT IN The handle provided for the message by the function Set_KrlMsg() . Return Type Description BOOL Returns true if the message still exists in the message buffer. Comments ... Notes The function Exists_KrlMsg() can be used to check whether a specific message still exists. It also checks whether this message is still present in the message buffer. This means that the message is transferred to the message buffer and displayed from there in the message window. The function does not wait until the message has been deleted, but merely searches the buffer for the message with this handle. The KRL program must therefore be polled cyclically until the message has been deleted. Notification messages cannot be checked, as they are not managed in the message buffer. \ue3c9","title":"Exists_KrlMsg"},{"location":"krl/reference/system.messages/#get_msgbuffer","text":"Copy the content of the message buffer. Parameters Parameter Type Value/Ref Description msgBuf[] MsgBuf_T [100] OUT Array of buffer elements containing all the messages in the buffer Return Type Description INT Returns the number of messages in the message buffer. Comments ... Notes The function Get_MsgBuffer() reads the message buffer and writes the messages in the buffer to the OUT parameter msgBuff[] . The size of the buffer is 100 . Get_MsgBuffer() can read the following message types from the buffer : Status messages from the kernel system (#sys_state) Acknowledgement messages from the kernel system (#sys_quit) User-defined status messages (#usr_state) User-defined acknowledgement messages (#usr_quit) User-defined dialog messages (#usr_dlg) User-defined wait messages (#usr_wait) \ue3c9","title":"Get_MsgBuffer"},{"location":"krl/reference/system.messages/#set_krldlg","text":"Generates a dialog message. Parameters Parameter Type Value/Ref Description msg KrlMsg_T OUT Structure defining the name, originator and message text. params KrlMsgPar_T OUT Structure containing the message parameters. softkey KrlMsgDlgSK_T OUT Structure containing the softkey assignment. options KrlMsgOpt_T OUT Structure containing the message reaction. Return Type Description INT Returns a handle to the generated dialog message. handle > 0 on success handle = -1 on failure Comments ... Notes The function Set_KrlDlg() generates a dialog message. This means that the message is transferred to the message buffer and displayed from there in the message window. The function merely generates the dialog. It does not wait until the dialog has been answered. A dialog cannot be generated until no other dialog is active. \ue3c9","title":"Set_KrlDlg"},{"location":"krl/reference/system.messages/#set_krlmsg","text":"Generate a message. Parameters Parameter Type Value/Ref Description type EKrlMsgType IN Defines the type of the message to be generated ( #notify , #state , #quit , #waiting ). msg KrlMsg_T OUT Structure defining the name, originator and message text params KrlMsgPar_T OUT Structure containing the message parameters options KrlMsgOpt_T OUT Structure containing the message reaction Return Type Description INT Returns a handle to the generated message. handle > 0 on success, handle = -1 on failure. Comments ... Notes The function Set_KrlMsg() generates a message. This means that the message is transferred to the message buffer and displayed from there in the message window. Return -1 : The message could not be generated (e.g.because the message buffer is too full). >0 : The message was generated successfully. The return value is a valid handle that can be used for further operations for this message, e.g. for deleting the message with Clear_KrlMsg() . No handle is required for notification messages. Exceptions Notification messages are displayed in the message window by means of Set_KrlMsg(). They are not managed in the message buffer, however (\u201cfire and forget\u201d principle). To generate dialog messages, the function Set_KrlDlg() must be used. function withTitleAttributeContent(tippy) { return (targets, options = {}) => tippy(targets, { ...options, content(reference) { if (options.content) { return options.content } const title = reference.getAttribute('title') reference.removeAttribute('title') return title } }) } window.tippy = withTitleAttributeContent(tippy) tippy('.tippy', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, }) tippy('.tippy-toc', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, })","title":"Set_KrlMsg"},{"location":"krl/reference/system.types/","text":"System.Types \u00b6 Enum Types \u00b6 \ue3c9 ADAP_ACC \u00b6 Acceleration adaptation modes Name Type ADAP_ACC ENUM Value Description #NONE Acceleration adaptation not activated #STEP1 Dynamic model without kinetic energy #STEP2 Dynamic model with kinetic energy \ue3c9 ASYNC_STATE \u00b6 Asynchronous motion states Name Type ASYNC_STATE ENUM Value Description #BUSY Asynchronous motions active, stopped or temporarily stored. #IDLE No asynchronous motions active or stopped (queue is empty); last motion terminated without an interrupt. #CANCELLED No asynchronous motions active or stopped (queue is empty); last motion was canceled. #PEND Asynchronous motion is planned, but is not currently being executed \ue3c9 ASYS \u00b6 None Name Type ASYS ENUM Value Description #ROBOT Robot axes A1..A6 #EXTAX External axes E1..E6 #EXTAX2 External kinematic system \ue3c9 AXWMODE \u00b6 Functional principles for axis-specific workspace monitoring Name Type AXWMODE ENUM Value Description #OFF Work envelope monitoring deactivated #INSIDE The output is set if the TCP is located inside the work envelope #OUTSIDE The output is set if the TCP is located outside the work envelope #INSIDE_STOP The output is set and the robot stopped if the TCP is located inside the work envelope #OUTSIDE_STOP The output is set and the robot stopped if the TCP is located outside the work envelope \ue3c9 CIRC_TYPE \u00b6 Orientation control modes for CIRC blocks Name Type CIRC_TYPE ENUM Value Description #BASE Space-related orientation control #PATH Path-related orientation control \ue3c9 COSYS \u00b6 Orientation control modes for CIRC blocks Name Type COSYS ENUM Value Description #AX Motions are relative to the axis-specific coordinate system #CAR Motions are relative to the Cartesian coordinate system. \ue3c9 CP_VEL_TYPE \u00b6 Reduction modes for CP path velocity Name Type CP_VEL_TYPE ENUM Value Description #CONSTANT No reduction #VAR_T1 Reduction in jog mode SStep(T1) #VAR_ALL Reduction in all modes \ue3c9 PRO_MODE \u00b6 Program run modes Name Type PRO_MODE ENUM Value Description #ISTEP Incremental Step : block-by-block processing with a stop after each instruction (without ADVANCE run processing). #PSTEP Program Step: complete processing of subprograms (without ADVANCE run processing). #MSTEP Motion Step: step-by-step processing with a stop after each motion instruction (without ADVANCE run processing). #CSTEP Continuous Step: Step-by-step processing with a stop after each motion instruction (with ADVANCE run processing). #GO Continuous execution to the end of the program. #BSTEP Back Step: Continuous execution backwards to the start of the program. \ue3c9 PRO_STATE \u00b6 Process states Name Type PRO_STATE ENUM Value Description #P_FREE Program not selected #P_RESET Program reset #P_ACTIVE Program active #P_STOP Program stopped #P_END End of program reached \ue3c9 SW_ONOFF \u00b6 Generic ON/OFF switch Name Type SW_ONOFF ENUM Value Description #ON Switched ON #OFF Switched OFF Struc Types \u00b6 \ue3c9 ACC_CAR \u00b6 Frame data structure with an additional magnitude field. Name Type ACC_CAR STRUC Field Type Description X REAL X component Y REAL X component Z REAL X component ABS REAL Magnitude ||X 2 + Y 2 + Z 2 || A REAL A component B REAL B component C REAL C component \ue3c9 AXBOX \u00b6 Axis-specific state data structure Name Type AXBOX STRUC Field Type Description Mode AXWMODE Functional principle of the axis-specific workspace monitoring function State BOOL Violation of the axis-specific workspace Name[] CHAR[24] Name of the particular axis-specific workspace \ue3c9 AXIS \u00b6 Robot axis A1..A6 data structure. Name Type AXIS STRUC Field Type Description A1 REAL A2 REAL A3 REAL A4 REAL A5 REAL A6 REAL \ue3c9 AXIS_CAL \u00b6 Axis-specific state data structure Name Type AXIS_CAL STRUC Field Type Description A1 BOOL A2 BOOL A3 BOOL A4 BOOL A5 BOOL A6 BOOL E1 BOOL E2 BOOL E3 BOOL E4 BOOL E5 BOOL E6 BOOL \ue3c9 AXIS_INC \u00b6 Axis-specific increments data structure Name Type AXIS_INC STRUC Field Type Description A1 INT A2 INT A3 INT A4 INT A5 INT A6 INT E1 INT E2 INT E3 INT E4 INT E5 INT E6 INT \ue3c9 BUS \u00b6 L2 bus interface data structure. Name Type BUS STRUC Field Type Description PROTO INT PROC INT RCO INT BL INT PT INT TS INT BAUD INT TSL INT MIN_TDSR INT MAX_TDSR INT TTR INT HSA INT G INT DFLT_SAP INT \ue3c9 CP \u00b6 Speed/Acceleration data structure Name Type CP STRUC Field Type Description CP REAL linear component ORI1 REAL Swivel component ORI2 REAL Rotational component \ue3c9 E6AXIS \u00b6 Robot axis A1..A6 and external axis E1..E6 data structure. Name Type E6AXIS STRUC Field Type Description A1 REAL A2 REAL A3 REAL A4 REAL A5 REAL A6 REAL E1 REAL E2 REAL E3 REAL E4 REAL E5 REAL E6 REAL \ue3c9 E6POS \u00b6 Position data structure. Name Type E6POS STRUC Field Type Description X REAL Y REAL Z REAL A REAL B REAL C REAL E1 REAL E2 REAL E3 REAL E4 REAL E5 REAL E6 REAL S INT Status T INT Turn \ue3c9 FRA \u00b6 Fraction data structure. Name Type FRA STRUC Field Type Description N INT numerator D INT denominator \ue3c9 FRAME \u00b6 Frame data structure. Name Type FRAME STRUC Field Type Description X REAL Y REAL Z REAL A REAL B REAL C REAL \ue3c9 POS \u00b6 Position data structure. Name Type POS STRUC Field Type Description X REAL Y REAL Z REAL A REAL B REAL C REAL S INT Status T INT Turn \ue3c9 PRO_IP \u00b6 Process pointer data structure Name Type PRO_IP STRUC Field Type Description I_EXECUTED BOOL true if the instruction is executed. false otherwise. NAME[] CHAR[32] Name of the block in the ADVANCE run NAME_C[] CHAR[32] Name of the block in the MAIN run P_ARRIVED INT Path status for the programmed point P_NAME[] CHAR[24] Name or aggregate of the end or auxiliary point SNR INT Block number in the ADVANCE run SNR_C INT Block number in the MAIN run \ue3c9 SIGINF \u00b6 Signal info data structure. Name Type SIGINF STRUC Field Type Description Typ #IN : signal is declared for inputs #OUT : signal is declared for outputs #INV : signal is not declared #IN0 : reserved for future use #OUT0 : signal for system outputs set to false DTyp #SYSI : system signal of data type INT (whole number) #SYSB : system signal of data type BOOL (logic state) #USRI : user-defined global signal of data type INT #USRB : user-defined global signal of data type BOOL Idx INT Signal number. O for invalid signal or signal set to false . Len INT Signal length. 1 for signal of type BOOL . 0 for invalid signal. \ue3c9 SIGNAL \u00b6 A signal defines and alias to one or several IN/OUT Name Type SIGNAL STRUC Comments ... Notes A SIGNAL links predefined signal variables for inputs or outputs with a name. Such a link, i.e. a SIGNAL declaration, is required in order to be able to address an analog input or output. An input or output may appear in several SIGNAL declarations. function withTitleAttributeContent(tippy) { return (targets, options = {}) => tippy(targets, { ...options, content(reference) { if (options.content) { return options.content } const title = reference.getAttribute('title') reference.removeAttribute('title') return title } }) } window.tippy = withTitleAttributeContent(tippy) tippy('.tippy', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, }) tippy('.tippy-toc', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, })","title":"System.Types"},{"location":"krl/reference/system.types/#systemtypes","text":"","title":"System.Types"},{"location":"krl/reference/system.types/#enum-types","text":"\ue3c9","title":"Enum Types"},{"location":"krl/reference/system.types/#adap_acc","text":"Acceleration adaptation modes Name Type ADAP_ACC ENUM Value Description #NONE Acceleration adaptation not activated #STEP1 Dynamic model without kinetic energy #STEP2 Dynamic model with kinetic energy \ue3c9","title":"ADAP_ACC"},{"location":"krl/reference/system.types/#async_state","text":"Asynchronous motion states Name Type ASYNC_STATE ENUM Value Description #BUSY Asynchronous motions active, stopped or temporarily stored. #IDLE No asynchronous motions active or stopped (queue is empty); last motion terminated without an interrupt. #CANCELLED No asynchronous motions active or stopped (queue is empty); last motion was canceled. #PEND Asynchronous motion is planned, but is not currently being executed \ue3c9","title":"ASYNC_STATE"},{"location":"krl/reference/system.types/#asys","text":"None Name Type ASYS ENUM Value Description #ROBOT Robot axes A1..A6 #EXTAX External axes E1..E6 #EXTAX2 External kinematic system \ue3c9","title":"ASYS"},{"location":"krl/reference/system.types/#axwmode","text":"Functional principles for axis-specific workspace monitoring Name Type AXWMODE ENUM Value Description #OFF Work envelope monitoring deactivated #INSIDE The output is set if the TCP is located inside the work envelope #OUTSIDE The output is set if the TCP is located outside the work envelope #INSIDE_STOP The output is set and the robot stopped if the TCP is located inside the work envelope #OUTSIDE_STOP The output is set and the robot stopped if the TCP is located outside the work envelope \ue3c9","title":"AXWMODE"},{"location":"krl/reference/system.types/#circ_type","text":"Orientation control modes for CIRC blocks Name Type CIRC_TYPE ENUM Value Description #BASE Space-related orientation control #PATH Path-related orientation control \ue3c9","title":"CIRC_TYPE"},{"location":"krl/reference/system.types/#cosys","text":"Orientation control modes for CIRC blocks Name Type COSYS ENUM Value Description #AX Motions are relative to the axis-specific coordinate system #CAR Motions are relative to the Cartesian coordinate system. \ue3c9","title":"COSYS"},{"location":"krl/reference/system.types/#cp_vel_type","text":"Reduction modes for CP path velocity Name Type CP_VEL_TYPE ENUM Value Description #CONSTANT No reduction #VAR_T1 Reduction in jog mode SStep(T1) #VAR_ALL Reduction in all modes \ue3c9","title":"CP_VEL_TYPE"},{"location":"krl/reference/system.types/#pro_mode","text":"Program run modes Name Type PRO_MODE ENUM Value Description #ISTEP Incremental Step : block-by-block processing with a stop after each instruction (without ADVANCE run processing). #PSTEP Program Step: complete processing of subprograms (without ADVANCE run processing). #MSTEP Motion Step: step-by-step processing with a stop after each motion instruction (without ADVANCE run processing). #CSTEP Continuous Step: Step-by-step processing with a stop after each motion instruction (with ADVANCE run processing). #GO Continuous execution to the end of the program. #BSTEP Back Step: Continuous execution backwards to the start of the program. \ue3c9","title":"PRO_MODE"},{"location":"krl/reference/system.types/#pro_state","text":"Process states Name Type PRO_STATE ENUM Value Description #P_FREE Program not selected #P_RESET Program reset #P_ACTIVE Program active #P_STOP Program stopped #P_END End of program reached \ue3c9","title":"PRO_STATE"},{"location":"krl/reference/system.types/#sw_onoff","text":"Generic ON/OFF switch Name Type SW_ONOFF ENUM Value Description #ON Switched ON #OFF Switched OFF","title":"SW_ONOFF"},{"location":"krl/reference/system.types/#struc-types","text":"\ue3c9","title":"Struc Types"},{"location":"krl/reference/system.types/#acc_car","text":"Frame data structure with an additional magnitude field. Name Type ACC_CAR STRUC Field Type Description X REAL X component Y REAL X component Z REAL X component ABS REAL Magnitude ||X 2 + Y 2 + Z 2 || A REAL A component B REAL B component C REAL C component \ue3c9","title":"ACC_CAR"},{"location":"krl/reference/system.types/#axbox","text":"Axis-specific state data structure Name Type AXBOX STRUC Field Type Description Mode AXWMODE Functional principle of the axis-specific workspace monitoring function State BOOL Violation of the axis-specific workspace Name[] CHAR[24] Name of the particular axis-specific workspace \ue3c9","title":"AXBOX"},{"location":"krl/reference/system.types/#axis","text":"Robot axis A1..A6 data structure. Name Type AXIS STRUC Field Type Description A1 REAL A2 REAL A3 REAL A4 REAL A5 REAL A6 REAL \ue3c9","title":"AXIS"},{"location":"krl/reference/system.types/#axis_cal","text":"Axis-specific state data structure Name Type AXIS_CAL STRUC Field Type Description A1 BOOL A2 BOOL A3 BOOL A4 BOOL A5 BOOL A6 BOOL E1 BOOL E2 BOOL E3 BOOL E4 BOOL E5 BOOL E6 BOOL \ue3c9","title":"AXIS_CAL"},{"location":"krl/reference/system.types/#axis_inc","text":"Axis-specific increments data structure Name Type AXIS_INC STRUC Field Type Description A1 INT A2 INT A3 INT A4 INT A5 INT A6 INT E1 INT E2 INT E3 INT E4 INT E5 INT E6 INT \ue3c9","title":"AXIS_INC"},{"location":"krl/reference/system.types/#bus","text":"L2 bus interface data structure. Name Type BUS STRUC Field Type Description PROTO INT PROC INT RCO INT BL INT PT INT TS INT BAUD INT TSL INT MIN_TDSR INT MAX_TDSR INT TTR INT HSA INT G INT DFLT_SAP INT \ue3c9","title":"BUS"},{"location":"krl/reference/system.types/#cp","text":"Speed/Acceleration data structure Name Type CP STRUC Field Type Description CP REAL linear component ORI1 REAL Swivel component ORI2 REAL Rotational component \ue3c9","title":"CP"},{"location":"krl/reference/system.types/#e6axis","text":"Robot axis A1..A6 and external axis E1..E6 data structure. Name Type E6AXIS STRUC Field Type Description A1 REAL A2 REAL A3 REAL A4 REAL A5 REAL A6 REAL E1 REAL E2 REAL E3 REAL E4 REAL E5 REAL E6 REAL \ue3c9","title":"E6AXIS"},{"location":"krl/reference/system.types/#e6pos","text":"Position data structure. Name Type E6POS STRUC Field Type Description X REAL Y REAL Z REAL A REAL B REAL C REAL E1 REAL E2 REAL E3 REAL E4 REAL E5 REAL E6 REAL S INT Status T INT Turn \ue3c9","title":"E6POS"},{"location":"krl/reference/system.types/#fra","text":"Fraction data structure. Name Type FRA STRUC Field Type Description N INT numerator D INT denominator \ue3c9","title":"FRA"},{"location":"krl/reference/system.types/#frame","text":"Frame data structure. Name Type FRAME STRUC Field Type Description X REAL Y REAL Z REAL A REAL B REAL C REAL \ue3c9","title":"FRAME"},{"location":"krl/reference/system.types/#pos","text":"Position data structure. Name Type POS STRUC Field Type Description X REAL Y REAL Z REAL A REAL B REAL C REAL S INT Status T INT Turn \ue3c9","title":"POS"},{"location":"krl/reference/system.types/#pro_ip","text":"Process pointer data structure Name Type PRO_IP STRUC Field Type Description I_EXECUTED BOOL true if the instruction is executed. false otherwise. NAME[] CHAR[32] Name of the block in the ADVANCE run NAME_C[] CHAR[32] Name of the block in the MAIN run P_ARRIVED INT Path status for the programmed point P_NAME[] CHAR[24] Name or aggregate of the end or auxiliary point SNR INT Block number in the ADVANCE run SNR_C INT Block number in the MAIN run \ue3c9","title":"PRO_IP"},{"location":"krl/reference/system.types/#siginf","text":"Signal info data structure. Name Type SIGINF STRUC Field Type Description Typ #IN : signal is declared for inputs #OUT : signal is declared for outputs #INV : signal is not declared #IN0 : reserved for future use #OUT0 : signal for system outputs set to false DTyp #SYSI : system signal of data type INT (whole number) #SYSB : system signal of data type BOOL (logic state) #USRI : user-defined global signal of data type INT #USRB : user-defined global signal of data type BOOL Idx INT Signal number. O for invalid signal or signal set to false . Len INT Signal length. 1 for signal of type BOOL . 0 for invalid signal. \ue3c9","title":"SIGINF"},{"location":"krl/reference/system.types/#signal","text":"A signal defines and alias to one or several IN/OUT Name Type SIGNAL STRUC Comments ... Notes A SIGNAL links predefined signal variables for inputs or outputs with a name. Such a link, i.e. a SIGNAL declaration, is required in order to be able to address an analog input or output. An input or output may appear in several SIGNAL declarations. function withTitleAttributeContent(tippy) { return (targets, options = {}) => tippy(targets, { ...options, content(reference) { if (options.content) { return options.content } const title = reference.getAttribute('title') reference.removeAttribute('title') return title } }) } window.tippy = withTitleAttributeContent(tippy) tippy('.tippy', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, }) tippy('.tippy-toc', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, })","title":"SIGNAL"},{"location":"krl/reference/system.variables/","text":"System.Variables \u00b6 Variables \u00b6 \ue3c9 $A4PAR \u00b6 Set axis 4 parallel to the last rotational main axis Name Type Unit Constraint $A4PAR INT 0 when unset. 1 when set \ue3c9 $ABS_ACCUR \u00b6 Switch absolutely accurate robot model on/off Name Type $ABS_ACCUR BOOL \ue3c9 $ABS_CONVERT \u00b6 Conversion of point coordinates into absolutely accurate robot model Name Type $ABS_CONVERT BOOL \ue3c9 $ABS_RELOAD \u00b6 Reload absolutely accurate robot model Name Type $ABS_RELOAD BOOL \ue3c9 $ACC \u00b6 Accelerations in the ADVANCE run Name Type $ACC CP Field Type Unit Constraint Description CP REAL m/s 2 Path acceleration in the ADVANCE run ORI1 REAL \u00b0/s 2 Swivel acceleration in the ADVANCE run ORI2 REAL \u00b0/s 2 Rotational acceleration in the ADVANCE run \ue3c9 $ACC_ACT_MA \u00b6 Limit value of axial command acceleration Name Type Unit Constraint $ACC_ACT_MA INT % [0,100] \ue3c9 $ACC_AXIS[] \u00b6 Acceleration of the axes A1..A6 in the ADVANCE run Name Type Unit Constraint $ACC_AXIS[] INT[6] % [0,100] \ue3c9 $ACC_AXIS_C[] \u00b6 Acceleration of the axes A1..A6 in the MAIN run Name Type Unit Constraint $ACC_AXIS_C[] INT[6] % [0,100] \ue3c9 $ACC_C \u00b6 Accelerations in the MAIN run Name Type $ACC_C CP Field Type Unit Constraint Description CP REAL m/s 2 > 0 Path acceleration in the MAIN run ORI1 REAL \u00b0/s 2 Swivel acceleration in the MAIN run ORI2 REAL \u00b0/s 2 Rotational acceleration in the MAIN run \ue3c9 $ACC_CAR_ACT \u00b6 The current values of the acceleration components and the total acceleration Name Type $ACC_CAR_ACT ACC_CAR Field Type Unit Constraint Description X REAL m/s 2 X component of the acceleration expressed in $ACC_CAR_TOOL frame. Y REAL m/s 2 Y component of the acceleration expressed in $ACC_CAR_TOOL frame. Z REAL m/s 2 Z component of the acceleration expressed in $ACC_CAR_TOOL frame. ABS REAL m/s 2 >= 0 Acceleration magnitude. Comments ... Notes Acceleration due to gravity (9.81 m/s 2 ) is automatically calculated into the acceleration caused by the motion. Note that A , B and C fields are not used. \ue3c9 $ACC_CAR_LIMIT \u00b6 Maximum permissible value for the acceleration components and the total acceleration Name Type $ACC_CAR_LIMIT ACC_CAR Field Type Unit Constraint Description X REAL m/s 2 Maximum permissible value for the X component of the acceleration expressed in $ACC_CAR_TOOL frame. Y REAL m/s 2 Maximum permissible value for the Y component of the acceleration expressed in $ACC_CAR_TOOL frame. Z REAL m/s 2 Maximum permissible value for the Z component of the acceleration expressed in $ACC_CAR_TOOL frame. ABS REAL m/s 2 >= 0 Maximum permissible value for the acceleration magnitude. Comments ... Notes If the variable $ACC_CAR_STOP is set to true , then if the acceleration value is exceeded the robot is stopped (ramp-down braking) and an acknowledgement message is generated. Note that A , B and C fields are not used. \ue3c9 $ACC_CAR_MAX \u00b6 Saves the greatest absolute values of $ACC_CAR_ACT Name Type $ACC_CAR_MAX ACC_CAR Comments ... Notes This variable can be set to 0 to determine the maximum values. \ue3c9 $ACC_CAR_STOP \u00b6 Activates/Deactivates stop reaction when the value specified in $ACC_CAR_LIMIT is exceeded. Name Type $ACC_CAR_STOP BOOL \ue3c9 $ACC_CAR_TOOL \u00b6 A point on the tool mounted on the robot at which the current effective acceleration is measured Name Type $ACC_CAR_TOOL FRAME Comments ... Notes In the same way as $TOOL , $ACC_CAR_TOOL is also specified relative to the flange by means of the X , Y and Z coordinates. The angles of rotation A , B and C indicate the positions of the 3 axes of the coordinate system in which the acceleration components are then specified. The individual acceleration components and the total acceleration are all evaluated cyclically. Acceleration caused by gear unit torsion or flexion of the robot is not taken into consideration. \ue3c9 $ACC_EXTAX[] \u00b6 Acceleration of the external axes E1..E7 in the ADVANCE run Name Type Unit Constraint $ACC_EXTAX[] INT[6] % [0,100] \ue3c9 $ACC_EXTAX_C[] \u00b6 Acceleration of the external axes E1..E7 in the MAIN run Name Type Unit Constraint $ACC_EXTAX_C[] INT[6] % [0,100] \ue3c9 $ACC_MA \u00b6 Maximum values for path, swivel and rotational accelerations Name Type $ACC_MA CP Field Type Unit Constraint Description CP REAL m/s 2 Maximum path acceleration ORI1 REAL \u00b0/s 2 Maximum swivel acceleration ORI2 REAL \u00b0/s 2 Maximum rotational acceleration \ue3c9 $ACC_OV \u00b6 Data for acceleration with changes of override Name Type $ACC_OV CP Field Type Unit Constraint Description CP REAL m/s 2 Path acceleration with change of override ORI1 REAL \u00b0/s 2 Swivel acceleration with change of override ORI2 REAL \u00b0/s 2 Rotational acceleration with change of override \ue3c9 $ACT_BASE \u00b6 Number of the current BASE system Name Type Unit Constraint $ACT_BASE INT index \ue3c9 $ACT_EX_AX \u00b6 Number of the current external base kinematic system Name Type Unit Constraint $ACT_EX_AX INT index \ue3c9 $ACT_TOOL \u00b6 Number of the current tool coordinate system Name Type Unit Constraint $ACT_TOOL INT index \ue3c9 $ACT_VAL_DIF \u00b6 Maximum permissible difference of encoder actual values when switching on system. Name Type Unit Constraint $ACT_VAL_DIF INT increments Comments ... Notes If the limit values are exceeded, the message Perform mastering appears. \ue3c9 $ADAP_ACC \u00b6 Activation of acceleration adaptation. Name Type Constraint $ADAP_ACC ADAP_ACC #NONE , #STEP1 , #STEP2 Comments ... Notes #STEP1 and #STEP2 require valid dynamic data ( $DYN_DAT ). \ue3c9 $ADVANCE \u00b6 Specification of the ADVANCE run. Name Type Unit Constraint $ADVANCE INT motion blocks [0,5] \ue3c9 $ALARM_STOP \u00b6 Specification of the ADVANCE run. Name Type $ALARM_STOP SIGNAL \ue3c9 $ANA_DEL_FLT \u00b6 Analog output filter Name Type Constraint $ANA_DEL_FLT SW_ONOFF #ON , #OFF \ue3c9 $ANIN[] \u00b6 Analog inputs $ANIN[1]..$ANIN[8] Name Type Unit Constraint $ANIN[] REAL[8] [-1.0, 1.0] Comments ... Notes -1.0 maps to -10V +1.0 maps to +10V \ue3c9 $ANOUT[] \u00b6 Analog outputs $ANIN[1]..$ANIN[16] Name Type Unit Constraint $ANOUT[] REAL[16] [-1.0, 1.0] Comments ... Notes -1.0 maps to -10V +1.0 maps to +10V \ue3c9 $APO_DIS_PTP[] \u00b6 Maximum approximation distance for PTP motions. Name Type Unit Constraint $APO_DIS_PTP[] REAL[12] mm or \u00b0 Comments ... Notes 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9 $ASYNC_AX \u00b6 Motion input for asynchronous external axes E1..E6 , negative or positive direction. Name Type $ASYNC_AX SIGNAL \ue3c9 $ASYNC_AXi_M \u00b6 Motion input for asynchronous external axes E1..E6 , negative direction Name Type $ASYNC_AXi_M SIGNAL Comments ... Notes SIGNAL $ASYNC_AX1_M $IN[1026] SIGNAL $ASYNC_AX2_M $IN[1026] SIGNAL $ASYNC_AX3_M $IN[1026] SIGNAL $ASYNC_AX4_M $IN[1026] SIGNAL $ASYNC_AX5_M $IN[1026] SIGNAL $ASYNC_AX6_M $IN[1026] \ue3c9 $ASYNC_AXi_P \u00b6 Motion input for asynchronous external axes E1..E6 , positive direction Name Type $ASYNC_AXi_P SIGNAL Comments ... Notes SIGNAL $ASYNC_AX1_P $IN[1026] SIGNAL $ASYNC_AX2_P $IN[1026] SIGNAL $ASYNC_AX3_P $IN[1026] SIGNAL $ASYNC_AX4_P $IN[1026] SIGNAL $ASYNC_AX5_P $IN[1026] SIGNAL $ASYNC_AX6_P $IN[1026] \ue3c9 $ASYNC_AXIS \u00b6 Bit arrays to switch external axes to asynchronous mode Name Type Unit Constraint $ASYNC_AXIS INT Bit = 0 (synchronous mode) Bit = 1 (asynchronous mode) Comments ... Notes When $ASYNC_AXIS is assigned in a KRL program, the newly-defined asynchronous axes are valid from this position until a new assignment is made. When $ASYNC_AXIS is defined, the ADVANCE run will be stopped if the value of $ASYNC_AXIS changes. Before a new value of $ASYNC_AXIS is saved, the system will wait until all synchronous motions (through advance run stop) and all asynchronous motions have been completed, and all axes are in position. Thus the instruction $ASYNC_AXIS = ... can be used \u2013 along with the system variable $ASYNC_STATE \u2013 to synchronize in time synchronous and asynchronous motions. $ASYNC_AXIS can only be modified in the KRL program, and not in the interrupt or in the SUBMIT interpreter. The bits correspond to the external axes in ascending order : Bit 0 : external axis 1, Bit 1 : external axis 2, ... If the bit is set, the external axis will be switched to asynchronous mode; if it is reset, the external axis will be switched back to synchronous mode. \ue3c9 $ASYNC_FLT \u00b6 Filter for asynchronous external axes Name Type Unit Constraint $ASYNC_FLT INT ms [0,16] Comments ... Notes The value of $ASYNC_FLT is the filter length in milliseconds for all asynchronously coordinated motions. It corresponds to the system variable FILTER for synchronous motions. \ue3c9 $ASYNC_MODE \u00b6 Mode for asynchronous external axes Name Type Unit Constraint $ASYNC_MODE INT ms [0,16] Comments ... Notes In the machine data of the controller, the bit mask $ASYNC_MODE can be used to set various asynchronous motion execution modes. It is not possible to change modes while the robot controller is running. The modes can be combined in any way desired. Certain modes must be set in order to use special applications. In the standard setting (default mode) no $ASYNC_MODE bits are set. Only bit 0 is used at this time : Bit 0 = 0 : default mode Bit 0 = 1 (1 st bit) : mode 1 Bit 1 = (2 nd bit) : mode 2 block selection response \ue3c9 $ASYNC_OPT \u00b6 Option flag for asynchronous axes are possible Name Type $ASYNC_OPT BOOL Comments ... Notes true : asynchronous axes possible false : asynchronous axes not possible \ue3c9 $ASYNC_STATE \u00b6 Current asynchronous motion execution state Name Type Constraint $ASYNC_STATE ASYNC_STATE #BUSY , #IDLE , #CANCELLED , #PEND Comments ... Notes $ASYNC_STATE can be used to check the current asynchronous motion execution state. Asynchronous and normal robot motions can be synchronized using this variable. \ue3c9 $ASYNC_T1_FAST \u00b6 Control of the velocity reduction factor in Test 1 mode Name Type Unit Constraint $ASYNC_T1_FAST INT [0,1] Comments ... Notes 0 : activated 1 : deactivated \ue3c9 $ASYS \u00b6 Assignment of the jog keys Name Type Constraint $ASYS ASYS #ROBOT , #EXTAX , #EXTAX2 \ue3c9 $AUT \u00b6 Signal declaration Automatic mode Name Type $AUT SIGNAL \ue3c9 $AUX_POWER \u00b6 Signal declaration for external power supply Name Type $AUX_POWER SIGNAL Comments ... Notes If $AUX_POWER has the value true , the external power supply is active; if the value is false , the external power supply is not active. \ue3c9 $AXIS_ACT \u00b6 Current axis-specific robot position Name Type $AXIS_ACT E6AXIS \ue3c9 $AXIS_ACTMOD \u00b6 Display of axis angle modulo 180\u00b0 Name Type $AXIS_ACTMOD E6AXIS \ue3c9 $AXIS_BACK \u00b6 Start position of the current motion block, axis-specific Name Type $AXIS_BACK E6AXIS \ue3c9 $AXIS_CAL \u00b6 Display whether axis is referenced Name Type $AXIS_CAL AXIS_CAL Comments ... Notes true when axis is referenced. false otherwise. \ue3c9 $AXIS_DIR[] \u00b6 Direction of rotation for axis A1..A6 and external axis E1..E6 Name Type Unit Constraint $AXIS_DIR[] INT[12] {-1; 1} Comments ... Notes 1..6 : axis A1..A6 7..12 : external axis E1..E6 1 for positive direction. -1 for negative direction. \ue3c9 $AXIS_FOR \u00b6 Target position of the current motion block, axis-specific Name Type $AXIS_FOR E6AXIS \ue3c9 $AXIS_HOME[] \u00b6 Definition of the various home positions Name Type $AXIS_HOME[] E6AXIS [5] \ue3c9 $AXIS_INC \u00b6 Incremental actual values of the axes Name Type $AXIS_INC AXIS_INC Comments ... Notes Indication of the axis position in increments. \ue3c9 $AXIS_INT \u00b6 Robot position at the time of an interrupt Name Type $AXIS_INT E6AXIS \ue3c9 $AXIS_JUS \u00b6 Display whether axis is mastered Name Type $AXIS_JUS AXIS_CAL Comments ... Notes true when axis is mastered. false otherwise. \ue3c9 $AXIS_RESO[] \u00b6 Resolution of the position sensing system Name Type Unit Constraint $AXIS_RESO[] INT[12] increments / revolution Comments ... Notes Number of pulses per revolution of the encoder: 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9 $AXIS_RET \u00b6 Axis positions when leaving the programmed path, axis-specific Name Type $AXIS_RET E6AXIS \ue3c9 $AXIS_SEQ[] \u00b6 Change in sequence of axis ... to axis ... Name Type Unit Constraint $AXIS_SEQ[] INT[12] Comments ... Notes 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9 $AXIS_TYPE[] \u00b6 Axis type identification Name Type Unit Constraint $AXIS_TYPE[] INT[12] [1,5] Comments ... Notes Types : 1 : Linear 2 : Spindle 3 : Rotational 4 : Finitely rotating 5 : Infinitely rotating Index : 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9 $AXWORKSPACE[] \u00b6 Definition of axis-specific workspace monitoring Name Type $AXWORKSPACE[] AXBOX [8] \ue3c9 $BASE \u00b6 Base coordinate system in relation to the world coordinate system in the ADVANCE run. Name Type $BASE FRAME Comments ... Notes Offset and rotation of the base coordinate system in relation to the world coordinate system in the ADVANCE run. \ue3c9 $BASE_C \u00b6 Base coordinate system in relation to the world coordinate system in the MAIN run Name Type $BASE_C FRAME Comments ... Notes Offset and rotation of the base coordinate system in relation to the world coordinate system in the MAIN run. \ue3c9 $BASE_KIN[] \u00b6 External kinematic / axes in base Name Type $BASE_KIN[] CHAR[29] \ue3c9 $BOUNCE_TIME \u00b6 Bounce time for EMT signals Name Type Unit Constraint $BOUNCE_TIME INT ms Comments ... Notes The signal is only accepted if it remains stable over the entire time period defined in $BOUNCE_TIME . \ue3c9 $BRAKE_SIG \u00b6 Bit array for axis A1..A6 and external axis E1..E6 brakes Name Type Unit Constraint $BRAKE_SIG INT {0,1} Comments ... Notes 0 : brake closed 1 : brake open \ue3c9 $BRK_DEL_COM \u00b6 Time after which the axis brakes are closed on completion of positioning during jogging Name Type Unit Constraint $BRK_DEL_COM INT ms \ue3c9 $BRK_DEL_EX \u00b6 Brake delay time for external axes Name Type Unit Constraint $BRK_DEL_EX INT ms \ue3c9 $BRK_DEL_PRO \u00b6 Time after which the axis brakes are closed on completion of posi- tioning in the program Name Type Unit Constraint $BRK_DEL_PRO INT ms \ue3c9 $BRK_MAX_TM \u00b6 Maximum deceleration time for path-maintaining Emergency Stop Name Type Unit Constraint $BRK_MAX_TM INT ms \ue3c9 $BRK_MODE \u00b6 Brake control mode Name Type Unit Constraint $BRK_MODE INT bit array 'Bbbbb' Comments ... Notes The bits are counted from right to left : Bit 0 : axes A1..A6 close ( b = 1 ) / do not close ( b = 0 ) at command end. Bit 1 : axes A1..A6 close individually ( b = 1 ) / together ( b = 0 ). Bit 2 : axes A1..A6 close ( b = 1 ) / do not close ( b = 0 ) during pauses in the motion. Bit 3 : external axes E1..E6 brakes close individually ( b = 1 ) / together ( b = 0 ) with axes A1..A6 during motion pauses. \ue3c9 $BRK_OPENTM \u00b6 Time delay of command value output after axis brakes have been opened Name Type Unit Constraint $BRK_OPENTM INT ms \ue3c9 $BUS_PAR \u00b6 L2 bus interface (KRC32) Name Type $BUS_PAR BUS \ue3c9 $CABLE2_MON \u00b6 Additional motor cable monitoring Name Type $CABLE2_MON BOOL Comments ... Notes Specifies whether the connection of the second motor cable should be monitored ( true for special machines) : true : monitoring activated false : monitoring deactivated \ue3c9 $CAL_DIFF \u00b6 Mastering difference for EMT mastering with check run Name Type Unit Constraint $CAL_DIFF INT \ue3c9 $CALP \u00b6 Reference point offset between mathematical zero point and encoder zero point Name Type $CALP E6AXIS \ue3c9 $CIRC_TYPE \u00b6 Orientation control with CIRC blocks in the ADVANCE run Name Type Constraint $CIRC_TYPE CIRC_TYPE #BASE , #PATH \ue3c9 $CIRC_TYPE_C \u00b6 Orientation control with CIRC blocks in the MAIN run Name Type Constraint $CIRC_TYPE_C CIRC_TYPE #BASE , #PATH \ue3c9 $CMD \u00b6 Display assignment number (handle) for command channel Name Type Unit Constraint $CMD INT \ue3c9 $COM_NAME \u00b6 Command which is to be processed after next start Name Type $COM_NAME CHAR[486] \ue3c9 $COM_VAL_MI[] \u00b6 Limitation of command speed for axis A1..A6 and external axis E1..E6 Name Type Unit Constraint $COM_VAL_MI[] REAL[12] Comments ... Notes 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9 $CONF_MESS \u00b6 Signal declaration for reset acknowledgement messages . Name Type $CONF_MESS SIGNAL Comments ... Notes External confirmation \ue3c9 $COSYS \u00b6 Coordinate system for jogging Name Type Constraint $COSYS COSYS #AX , #CAR \ue3c9 $COUNT_I[] \u00b6 Freely usable integer variables Name Type Unit Constraint $COUNT_I[] INT[32] Comments ... Notes Used as counters in the VW package \ue3c9 $COUP_COMP[,] \u00b6 Axis coupling factors Name Type $COUP_COMP[,] FRA [6,6] \ue3c9 $CP_VEL_TYPE \u00b6 Reduction of the CP path velocity Name Type Constraint $CP_VEL_TYPE COSYS #AX , #CAR Comments ... Notes If the axis limit values are exceeded, the CP velocity is reduced. Reduction is always active in Cartesian jogging. \ue3c9 $CP_VEL_TYPE \u00b6 Reduction of the CP path velocity Name Type Constraint $CP_VEL_TYPE CP_VEL_TYPE #CONSTANT , #VAR_T1 , #VAR_ALL Comments ... Notes If the axis limit values are exceeded, the CP velocity is reduced. Reduction is always active in Cartesian jogging. \ue3c9 $CPVELREDMELD \u00b6 Generation of message if path velocity reduced Name Type Unit Constraint $CPVELREDMELD INT Comments ... Notes The message contains the point name and the maximum reduction in the specific motion command. 0 : Generation of message deactivated. 1 : Generation of message in the event of block change in jog mode. 100 : Generation of message in the event of block change in all modes. \ue3c9 $CURR_ACT[] \u00b6 Actual current of axes Name Type Unit Constraint $CURR_ACT[] REAL[12] % [-100,100] Comments ... Notes Current value of current of axes A1..A6 and external axes E1..E6 in percentage of maximum servo drive module current $CURR_MAX (-100% to +100%). 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9 $CURR_CAL[] \u00b6 Current calibration of axis in the power module Name Type Unit Constraint $CURR_CAL[] REAL[12] Comments ... Notes For KRC 1a and KRC 2 : calibration = 1 . 1 : High power 2 : Medium / low power 4 : Low power 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9 $CURR_COM_EX[] \u00b6 Current limitation for external axes in jog mode Name Type Unit Constraint $CURR_COM_EX[] REAL[6] Comments ... Notes 1..6 : external axis E1..E6 \ue3c9 $CURR_LIM[] \u00b6 Current limitation Name Type Unit Constraint $CURR_LIM[] INT[12] % [0,100] Comments ... Notes 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9 $CURR_MAX[] \u00b6 Maximum effective current on power module output Name Type Unit Constraint $CURR_MAX[] REAL[12] A Comments ... Notes Effective current must be present 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9 $CURR_MON[] \u00b6 Permissible rated current Name Type Unit Constraint $CURR_MON[] REAL[12] Comments ... Notes Defines the limit for i 2 x t monitoring for 55\u00b0C 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9 $CURR_RED[,] \u00b6 Current limitation for axes in % of the maximum current Name Type Unit Constraint $CURR_RED[,] REAL[12,2] Comments ... Notes [1..6,:] : axis A1..A6 [7..12,:] : external axis E1..E6 [:,1] : positive limit [:,2] : negative limit \ue3c9 $CYC_DEFi[] \u00b6 Input text for the corresponding cyclical flag Name Type $CYC_DEFi[] CHAR[470] Comments ... Notes i in [1,32] \ue3c9 $CYCFLAG[] \u00b6 Cyclical flags Name Type $CYCFLAG[] BOOL[32] Comments ... Notes There are 32 cyclical flags available. These flags are cyclically updated independently of program execution. The default value is false . \ue3c9 $OV_PRO \u00b6 Program override Name Type Unit Constraint $OV_PRO INT % [0, 100] Comments ... Notes Program override is the velocity of the robot during program execution. The program override is specified as a percentage of the programmed velocity. In T1 mode, the maximum velocity is 250 mm/s, irrespective of the value that is set. \ue3c9 $PRO_MODE \u00b6 Program run mode dependent on $INTERPRETER Name Type Constraint $PRO_MODE PRO_MODE #ISTEP , #PSTEP , #MSTEP , #CSTEP , #GO , #BSTEP \ue3c9 $PRO_MODE0 \u00b6 Program run mode of the SUBMIT interpreter Name Type Constraint $PRO_MODE0 PRO_MODE #ISTEP , #PSTEP , #MSTEP , #CSTEP , #GO , #BSTEP \ue3c9 $PRO_MODE1 \u00b6 Program run mode of the ROBOT interpreter Name Type Constraint $PRO_MODE1 PRO_MODE #ISTEP , #PSTEP , #MSTEP , #CSTEP , #GO , #BSTEP \ue3c9 $PRO_NAME0[] \u00b6 Process name of the SUBMIT interpreter Name Type $PRO_NAME0[] CHAR[24] \ue3c9 $PRO_NAME1[] \u00b6 Process name of the ROBOT interpreter Name Type $PRO_NAME1[] CHAR[24] \ue3c9 $PRO_NAME[] \u00b6 Process name dependent on $INTERPRETER Name Type $PRO_NAME[] CHAR[24] \ue3c9 $PRO_STATE \u00b6 Process state dependent on $INTERPRETER Name Type Constraint $PRO_STATE PRO_STATE #P_FREE , #P_RESET , #P_ACTIVE , #P_STOP , #P_END \ue3c9 $PRO_STATE0 \u00b6 Process state of the SUBMIT interpreter Name Type Constraint $PRO_STATE0 PRO_STATE #P_FREE , #P_RESET , #P_ACTIVE , #P_STOP , #P_END \ue3c9 $PRO_STATE1 \u00b6 Process state of the ROBOT interpreter Name Type Constraint $PRO_STATE1 PRO_STATE #P_FREE , #P_RESET , #P_ACTIVE , #P_STOP , #P_END function withTitleAttributeContent(tippy) { return (targets, options = {}) => tippy(targets, { ...options, content(reference) { if (options.content) { return options.content } const title = reference.getAttribute('title') reference.removeAttribute('title') return title } }) } window.tippy = withTitleAttributeContent(tippy) tippy('.tippy', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, }) tippy('.tippy-toc', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, })","title":"System.Variables"},{"location":"krl/reference/system.variables/#systemvariables","text":"","title":"System.Variables"},{"location":"krl/reference/system.variables/#variables","text":"\ue3c9","title":"Variables"},{"location":"krl/reference/system.variables/#a4par","text":"Set axis 4 parallel to the last rotational main axis Name Type Unit Constraint $A4PAR INT 0 when unset. 1 when set \ue3c9","title":"$A4PAR"},{"location":"krl/reference/system.variables/#abs_accur","text":"Switch absolutely accurate robot model on/off Name Type $ABS_ACCUR BOOL \ue3c9","title":"$ABS_ACCUR"},{"location":"krl/reference/system.variables/#abs_convert","text":"Conversion of point coordinates into absolutely accurate robot model Name Type $ABS_CONVERT BOOL \ue3c9","title":"$ABS_CONVERT"},{"location":"krl/reference/system.variables/#abs_reload","text":"Reload absolutely accurate robot model Name Type $ABS_RELOAD BOOL \ue3c9","title":"$ABS_RELOAD"},{"location":"krl/reference/system.variables/#acc","text":"Accelerations in the ADVANCE run Name Type $ACC CP Field Type Unit Constraint Description CP REAL m/s 2 Path acceleration in the ADVANCE run ORI1 REAL \u00b0/s 2 Swivel acceleration in the ADVANCE run ORI2 REAL \u00b0/s 2 Rotational acceleration in the ADVANCE run \ue3c9","title":"$ACC"},{"location":"krl/reference/system.variables/#acc_act_ma","text":"Limit value of axial command acceleration Name Type Unit Constraint $ACC_ACT_MA INT % [0,100] \ue3c9","title":"$ACC_ACT_MA"},{"location":"krl/reference/system.variables/#acc_axis","text":"Acceleration of the axes A1..A6 in the ADVANCE run Name Type Unit Constraint $ACC_AXIS[] INT[6] % [0,100] \ue3c9","title":"$ACC_AXIS[]"},{"location":"krl/reference/system.variables/#acc_axis_c","text":"Acceleration of the axes A1..A6 in the MAIN run Name Type Unit Constraint $ACC_AXIS_C[] INT[6] % [0,100] \ue3c9","title":"$ACC_AXIS_C[]"},{"location":"krl/reference/system.variables/#acc_c","text":"Accelerations in the MAIN run Name Type $ACC_C CP Field Type Unit Constraint Description CP REAL m/s 2 > 0 Path acceleration in the MAIN run ORI1 REAL \u00b0/s 2 Swivel acceleration in the MAIN run ORI2 REAL \u00b0/s 2 Rotational acceleration in the MAIN run \ue3c9","title":"$ACC_C"},{"location":"krl/reference/system.variables/#acc_car_act","text":"The current values of the acceleration components and the total acceleration Name Type $ACC_CAR_ACT ACC_CAR Field Type Unit Constraint Description X REAL m/s 2 X component of the acceleration expressed in $ACC_CAR_TOOL frame. Y REAL m/s 2 Y component of the acceleration expressed in $ACC_CAR_TOOL frame. Z REAL m/s 2 Z component of the acceleration expressed in $ACC_CAR_TOOL frame. ABS REAL m/s 2 >= 0 Acceleration magnitude. Comments ... Notes Acceleration due to gravity (9.81 m/s 2 ) is automatically calculated into the acceleration caused by the motion. Note that A , B and C fields are not used. \ue3c9","title":"$ACC_CAR_ACT"},{"location":"krl/reference/system.variables/#acc_car_limit","text":"Maximum permissible value for the acceleration components and the total acceleration Name Type $ACC_CAR_LIMIT ACC_CAR Field Type Unit Constraint Description X REAL m/s 2 Maximum permissible value for the X component of the acceleration expressed in $ACC_CAR_TOOL frame. Y REAL m/s 2 Maximum permissible value for the Y component of the acceleration expressed in $ACC_CAR_TOOL frame. Z REAL m/s 2 Maximum permissible value for the Z component of the acceleration expressed in $ACC_CAR_TOOL frame. ABS REAL m/s 2 >= 0 Maximum permissible value for the acceleration magnitude. Comments ... Notes If the variable $ACC_CAR_STOP is set to true , then if the acceleration value is exceeded the robot is stopped (ramp-down braking) and an acknowledgement message is generated. Note that A , B and C fields are not used. \ue3c9","title":"$ACC_CAR_LIMIT"},{"location":"krl/reference/system.variables/#acc_car_max","text":"Saves the greatest absolute values of $ACC_CAR_ACT Name Type $ACC_CAR_MAX ACC_CAR Comments ... Notes This variable can be set to 0 to determine the maximum values. \ue3c9","title":"$ACC_CAR_MAX"},{"location":"krl/reference/system.variables/#acc_car_stop","text":"Activates/Deactivates stop reaction when the value specified in $ACC_CAR_LIMIT is exceeded. Name Type $ACC_CAR_STOP BOOL \ue3c9","title":"$ACC_CAR_STOP"},{"location":"krl/reference/system.variables/#acc_car_tool","text":"A point on the tool mounted on the robot at which the current effective acceleration is measured Name Type $ACC_CAR_TOOL FRAME Comments ... Notes In the same way as $TOOL , $ACC_CAR_TOOL is also specified relative to the flange by means of the X , Y and Z coordinates. The angles of rotation A , B and C indicate the positions of the 3 axes of the coordinate system in which the acceleration components are then specified. The individual acceleration components and the total acceleration are all evaluated cyclically. Acceleration caused by gear unit torsion or flexion of the robot is not taken into consideration. \ue3c9","title":"$ACC_CAR_TOOL"},{"location":"krl/reference/system.variables/#acc_extax","text":"Acceleration of the external axes E1..E7 in the ADVANCE run Name Type Unit Constraint $ACC_EXTAX[] INT[6] % [0,100] \ue3c9","title":"$ACC_EXTAX[]"},{"location":"krl/reference/system.variables/#acc_extax_c","text":"Acceleration of the external axes E1..E7 in the MAIN run Name Type Unit Constraint $ACC_EXTAX_C[] INT[6] % [0,100] \ue3c9","title":"$ACC_EXTAX_C[]"},{"location":"krl/reference/system.variables/#acc_ma","text":"Maximum values for path, swivel and rotational accelerations Name Type $ACC_MA CP Field Type Unit Constraint Description CP REAL m/s 2 Maximum path acceleration ORI1 REAL \u00b0/s 2 Maximum swivel acceleration ORI2 REAL \u00b0/s 2 Maximum rotational acceleration \ue3c9","title":"$ACC_MA"},{"location":"krl/reference/system.variables/#acc_ov","text":"Data for acceleration with changes of override Name Type $ACC_OV CP Field Type Unit Constraint Description CP REAL m/s 2 Path acceleration with change of override ORI1 REAL \u00b0/s 2 Swivel acceleration with change of override ORI2 REAL \u00b0/s 2 Rotational acceleration with change of override \ue3c9","title":"$ACC_OV"},{"location":"krl/reference/system.variables/#act_base","text":"Number of the current BASE system Name Type Unit Constraint $ACT_BASE INT index \ue3c9","title":"$ACT_BASE"},{"location":"krl/reference/system.variables/#act_ex_ax","text":"Number of the current external base kinematic system Name Type Unit Constraint $ACT_EX_AX INT index \ue3c9","title":"$ACT_EX_AX"},{"location":"krl/reference/system.variables/#act_tool","text":"Number of the current tool coordinate system Name Type Unit Constraint $ACT_TOOL INT index \ue3c9","title":"$ACT_TOOL"},{"location":"krl/reference/system.variables/#act_val_dif","text":"Maximum permissible difference of encoder actual values when switching on system. Name Type Unit Constraint $ACT_VAL_DIF INT increments Comments ... Notes If the limit values are exceeded, the message Perform mastering appears. \ue3c9","title":"$ACT_VAL_DIF"},{"location":"krl/reference/system.variables/#adap_acc","text":"Activation of acceleration adaptation. Name Type Constraint $ADAP_ACC ADAP_ACC #NONE , #STEP1 , #STEP2 Comments ... Notes #STEP1 and #STEP2 require valid dynamic data ( $DYN_DAT ). \ue3c9","title":"$ADAP_ACC"},{"location":"krl/reference/system.variables/#advance","text":"Specification of the ADVANCE run. Name Type Unit Constraint $ADVANCE INT motion blocks [0,5] \ue3c9","title":"$ADVANCE"},{"location":"krl/reference/system.variables/#alarm_stop","text":"Specification of the ADVANCE run. Name Type $ALARM_STOP SIGNAL \ue3c9","title":"$ALARM_STOP"},{"location":"krl/reference/system.variables/#ana_del_flt","text":"Analog output filter Name Type Constraint $ANA_DEL_FLT SW_ONOFF #ON , #OFF \ue3c9","title":"$ANA_DEL_FLT"},{"location":"krl/reference/system.variables/#anin","text":"Analog inputs $ANIN[1]..$ANIN[8] Name Type Unit Constraint $ANIN[] REAL[8] [-1.0, 1.0] Comments ... Notes -1.0 maps to -10V +1.0 maps to +10V \ue3c9","title":"$ANIN[]"},{"location":"krl/reference/system.variables/#anout","text":"Analog outputs $ANIN[1]..$ANIN[16] Name Type Unit Constraint $ANOUT[] REAL[16] [-1.0, 1.0] Comments ... Notes -1.0 maps to -10V +1.0 maps to +10V \ue3c9","title":"$ANOUT[]"},{"location":"krl/reference/system.variables/#apo_dis_ptp","text":"Maximum approximation distance for PTP motions. Name Type Unit Constraint $APO_DIS_PTP[] REAL[12] mm or \u00b0 Comments ... Notes 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9","title":"$APO_DIS_PTP[]"},{"location":"krl/reference/system.variables/#async_ax","text":"Motion input for asynchronous external axes E1..E6 , negative or positive direction. Name Type $ASYNC_AX SIGNAL \ue3c9","title":"$ASYNC_AX"},{"location":"krl/reference/system.variables/#async_axi_m","text":"Motion input for asynchronous external axes E1..E6 , negative direction Name Type $ASYNC_AXi_M SIGNAL Comments ... Notes SIGNAL $ASYNC_AX1_M $IN[1026] SIGNAL $ASYNC_AX2_M $IN[1026] SIGNAL $ASYNC_AX3_M $IN[1026] SIGNAL $ASYNC_AX4_M $IN[1026] SIGNAL $ASYNC_AX5_M $IN[1026] SIGNAL $ASYNC_AX6_M $IN[1026] \ue3c9","title":"$ASYNC_AXi_M"},{"location":"krl/reference/system.variables/#async_axi_p","text":"Motion input for asynchronous external axes E1..E6 , positive direction Name Type $ASYNC_AXi_P SIGNAL Comments ... Notes SIGNAL $ASYNC_AX1_P $IN[1026] SIGNAL $ASYNC_AX2_P $IN[1026] SIGNAL $ASYNC_AX3_P $IN[1026] SIGNAL $ASYNC_AX4_P $IN[1026] SIGNAL $ASYNC_AX5_P $IN[1026] SIGNAL $ASYNC_AX6_P $IN[1026] \ue3c9","title":"$ASYNC_AXi_P"},{"location":"krl/reference/system.variables/#async_axis","text":"Bit arrays to switch external axes to asynchronous mode Name Type Unit Constraint $ASYNC_AXIS INT Bit = 0 (synchronous mode) Bit = 1 (asynchronous mode) Comments ... Notes When $ASYNC_AXIS is assigned in a KRL program, the newly-defined asynchronous axes are valid from this position until a new assignment is made. When $ASYNC_AXIS is defined, the ADVANCE run will be stopped if the value of $ASYNC_AXIS changes. Before a new value of $ASYNC_AXIS is saved, the system will wait until all synchronous motions (through advance run stop) and all asynchronous motions have been completed, and all axes are in position. Thus the instruction $ASYNC_AXIS = ... can be used \u2013 along with the system variable $ASYNC_STATE \u2013 to synchronize in time synchronous and asynchronous motions. $ASYNC_AXIS can only be modified in the KRL program, and not in the interrupt or in the SUBMIT interpreter. The bits correspond to the external axes in ascending order : Bit 0 : external axis 1, Bit 1 : external axis 2, ... If the bit is set, the external axis will be switched to asynchronous mode; if it is reset, the external axis will be switched back to synchronous mode. \ue3c9","title":"$ASYNC_AXIS"},{"location":"krl/reference/system.variables/#async_flt","text":"Filter for asynchronous external axes Name Type Unit Constraint $ASYNC_FLT INT ms [0,16] Comments ... Notes The value of $ASYNC_FLT is the filter length in milliseconds for all asynchronously coordinated motions. It corresponds to the system variable FILTER for synchronous motions. \ue3c9","title":"$ASYNC_FLT"},{"location":"krl/reference/system.variables/#async_mode","text":"Mode for asynchronous external axes Name Type Unit Constraint $ASYNC_MODE INT ms [0,16] Comments ... Notes In the machine data of the controller, the bit mask $ASYNC_MODE can be used to set various asynchronous motion execution modes. It is not possible to change modes while the robot controller is running. The modes can be combined in any way desired. Certain modes must be set in order to use special applications. In the standard setting (default mode) no $ASYNC_MODE bits are set. Only bit 0 is used at this time : Bit 0 = 0 : default mode Bit 0 = 1 (1 st bit) : mode 1 Bit 1 = (2 nd bit) : mode 2 block selection response \ue3c9","title":"$ASYNC_MODE"},{"location":"krl/reference/system.variables/#async_opt","text":"Option flag for asynchronous axes are possible Name Type $ASYNC_OPT BOOL Comments ... Notes true : asynchronous axes possible false : asynchronous axes not possible \ue3c9","title":"$ASYNC_OPT"},{"location":"krl/reference/system.variables/#async_state","text":"Current asynchronous motion execution state Name Type Constraint $ASYNC_STATE ASYNC_STATE #BUSY , #IDLE , #CANCELLED , #PEND Comments ... Notes $ASYNC_STATE can be used to check the current asynchronous motion execution state. Asynchronous and normal robot motions can be synchronized using this variable. \ue3c9","title":"$ASYNC_STATE"},{"location":"krl/reference/system.variables/#async_t1_fast","text":"Control of the velocity reduction factor in Test 1 mode Name Type Unit Constraint $ASYNC_T1_FAST INT [0,1] Comments ... Notes 0 : activated 1 : deactivated \ue3c9","title":"$ASYNC_T1_FAST"},{"location":"krl/reference/system.variables/#asys","text":"Assignment of the jog keys Name Type Constraint $ASYS ASYS #ROBOT , #EXTAX , #EXTAX2 \ue3c9","title":"$ASYS"},{"location":"krl/reference/system.variables/#aut","text":"Signal declaration Automatic mode Name Type $AUT SIGNAL \ue3c9","title":"$AUT"},{"location":"krl/reference/system.variables/#aux_power","text":"Signal declaration for external power supply Name Type $AUX_POWER SIGNAL Comments ... Notes If $AUX_POWER has the value true , the external power supply is active; if the value is false , the external power supply is not active. \ue3c9","title":"$AUX_POWER"},{"location":"krl/reference/system.variables/#axis_act","text":"Current axis-specific robot position Name Type $AXIS_ACT E6AXIS \ue3c9","title":"$AXIS_ACT"},{"location":"krl/reference/system.variables/#axis_actmod","text":"Display of axis angle modulo 180\u00b0 Name Type $AXIS_ACTMOD E6AXIS \ue3c9","title":"$AXIS_ACTMOD"},{"location":"krl/reference/system.variables/#axis_back","text":"Start position of the current motion block, axis-specific Name Type $AXIS_BACK E6AXIS \ue3c9","title":"$AXIS_BACK"},{"location":"krl/reference/system.variables/#axis_cal","text":"Display whether axis is referenced Name Type $AXIS_CAL AXIS_CAL Comments ... Notes true when axis is referenced. false otherwise. \ue3c9","title":"$AXIS_CAL"},{"location":"krl/reference/system.variables/#axis_dir","text":"Direction of rotation for axis A1..A6 and external axis E1..E6 Name Type Unit Constraint $AXIS_DIR[] INT[12] {-1; 1} Comments ... Notes 1..6 : axis A1..A6 7..12 : external axis E1..E6 1 for positive direction. -1 for negative direction. \ue3c9","title":"$AXIS_DIR[]"},{"location":"krl/reference/system.variables/#axis_for","text":"Target position of the current motion block, axis-specific Name Type $AXIS_FOR E6AXIS \ue3c9","title":"$AXIS_FOR"},{"location":"krl/reference/system.variables/#axis_home","text":"Definition of the various home positions Name Type $AXIS_HOME[] E6AXIS [5] \ue3c9","title":"$AXIS_HOME[]"},{"location":"krl/reference/system.variables/#axis_inc","text":"Incremental actual values of the axes Name Type $AXIS_INC AXIS_INC Comments ... Notes Indication of the axis position in increments. \ue3c9","title":"$AXIS_INC"},{"location":"krl/reference/system.variables/#axis_int","text":"Robot position at the time of an interrupt Name Type $AXIS_INT E6AXIS \ue3c9","title":"$AXIS_INT"},{"location":"krl/reference/system.variables/#axis_jus","text":"Display whether axis is mastered Name Type $AXIS_JUS AXIS_CAL Comments ... Notes true when axis is mastered. false otherwise. \ue3c9","title":"$AXIS_JUS"},{"location":"krl/reference/system.variables/#axis_reso","text":"Resolution of the position sensing system Name Type Unit Constraint $AXIS_RESO[] INT[12] increments / revolution Comments ... Notes Number of pulses per revolution of the encoder: 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9","title":"$AXIS_RESO[]"},{"location":"krl/reference/system.variables/#axis_ret","text":"Axis positions when leaving the programmed path, axis-specific Name Type $AXIS_RET E6AXIS \ue3c9","title":"$AXIS_RET"},{"location":"krl/reference/system.variables/#axis_seq","text":"Change in sequence of axis ... to axis ... Name Type Unit Constraint $AXIS_SEQ[] INT[12] Comments ... Notes 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9","title":"$AXIS_SEQ[]"},{"location":"krl/reference/system.variables/#axis_type","text":"Axis type identification Name Type Unit Constraint $AXIS_TYPE[] INT[12] [1,5] Comments ... Notes Types : 1 : Linear 2 : Spindle 3 : Rotational 4 : Finitely rotating 5 : Infinitely rotating Index : 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9","title":"$AXIS_TYPE[]"},{"location":"krl/reference/system.variables/#axworkspace","text":"Definition of axis-specific workspace monitoring Name Type $AXWORKSPACE[] AXBOX [8] \ue3c9","title":"$AXWORKSPACE[]"},{"location":"krl/reference/system.variables/#base","text":"Base coordinate system in relation to the world coordinate system in the ADVANCE run. Name Type $BASE FRAME Comments ... Notes Offset and rotation of the base coordinate system in relation to the world coordinate system in the ADVANCE run. \ue3c9","title":"$BASE"},{"location":"krl/reference/system.variables/#base_c","text":"Base coordinate system in relation to the world coordinate system in the MAIN run Name Type $BASE_C FRAME Comments ... Notes Offset and rotation of the base coordinate system in relation to the world coordinate system in the MAIN run. \ue3c9","title":"$BASE_C"},{"location":"krl/reference/system.variables/#base_kin","text":"External kinematic / axes in base Name Type $BASE_KIN[] CHAR[29] \ue3c9","title":"$BASE_KIN[]"},{"location":"krl/reference/system.variables/#bounce_time","text":"Bounce time for EMT signals Name Type Unit Constraint $BOUNCE_TIME INT ms Comments ... Notes The signal is only accepted if it remains stable over the entire time period defined in $BOUNCE_TIME . \ue3c9","title":"$BOUNCE_TIME"},{"location":"krl/reference/system.variables/#brake_sig","text":"Bit array for axis A1..A6 and external axis E1..E6 brakes Name Type Unit Constraint $BRAKE_SIG INT {0,1} Comments ... Notes 0 : brake closed 1 : brake open \ue3c9","title":"$BRAKE_SIG"},{"location":"krl/reference/system.variables/#brk_del_com","text":"Time after which the axis brakes are closed on completion of positioning during jogging Name Type Unit Constraint $BRK_DEL_COM INT ms \ue3c9","title":"$BRK_DEL_COM"},{"location":"krl/reference/system.variables/#brk_del_ex","text":"Brake delay time for external axes Name Type Unit Constraint $BRK_DEL_EX INT ms \ue3c9","title":"$BRK_DEL_EX"},{"location":"krl/reference/system.variables/#brk_del_pro","text":"Time after which the axis brakes are closed on completion of posi- tioning in the program Name Type Unit Constraint $BRK_DEL_PRO INT ms \ue3c9","title":"$BRK_DEL_PRO"},{"location":"krl/reference/system.variables/#brk_max_tm","text":"Maximum deceleration time for path-maintaining Emergency Stop Name Type Unit Constraint $BRK_MAX_TM INT ms \ue3c9","title":"$BRK_MAX_TM"},{"location":"krl/reference/system.variables/#brk_mode","text":"Brake control mode Name Type Unit Constraint $BRK_MODE INT bit array 'Bbbbb' Comments ... Notes The bits are counted from right to left : Bit 0 : axes A1..A6 close ( b = 1 ) / do not close ( b = 0 ) at command end. Bit 1 : axes A1..A6 close individually ( b = 1 ) / together ( b = 0 ). Bit 2 : axes A1..A6 close ( b = 1 ) / do not close ( b = 0 ) during pauses in the motion. Bit 3 : external axes E1..E6 brakes close individually ( b = 1 ) / together ( b = 0 ) with axes A1..A6 during motion pauses. \ue3c9","title":"$BRK_MODE"},{"location":"krl/reference/system.variables/#brk_opentm","text":"Time delay of command value output after axis brakes have been opened Name Type Unit Constraint $BRK_OPENTM INT ms \ue3c9","title":"$BRK_OPENTM"},{"location":"krl/reference/system.variables/#bus_par","text":"L2 bus interface (KRC32) Name Type $BUS_PAR BUS \ue3c9","title":"$BUS_PAR"},{"location":"krl/reference/system.variables/#cable2_mon","text":"Additional motor cable monitoring Name Type $CABLE2_MON BOOL Comments ... Notes Specifies whether the connection of the second motor cable should be monitored ( true for special machines) : true : monitoring activated false : monitoring deactivated \ue3c9","title":"$CABLE2_MON"},{"location":"krl/reference/system.variables/#cal_diff","text":"Mastering difference for EMT mastering with check run Name Type Unit Constraint $CAL_DIFF INT \ue3c9","title":"$CAL_DIFF"},{"location":"krl/reference/system.variables/#calp","text":"Reference point offset between mathematical zero point and encoder zero point Name Type $CALP E6AXIS \ue3c9","title":"$CALP"},{"location":"krl/reference/system.variables/#circ_type","text":"Orientation control with CIRC blocks in the ADVANCE run Name Type Constraint $CIRC_TYPE CIRC_TYPE #BASE , #PATH \ue3c9","title":"$CIRC_TYPE"},{"location":"krl/reference/system.variables/#circ_type_c","text":"Orientation control with CIRC blocks in the MAIN run Name Type Constraint $CIRC_TYPE_C CIRC_TYPE #BASE , #PATH \ue3c9","title":"$CIRC_TYPE_C"},{"location":"krl/reference/system.variables/#cmd","text":"Display assignment number (handle) for command channel Name Type Unit Constraint $CMD INT \ue3c9","title":"$CMD"},{"location":"krl/reference/system.variables/#com_name","text":"Command which is to be processed after next start Name Type $COM_NAME CHAR[486] \ue3c9","title":"$COM_NAME"},{"location":"krl/reference/system.variables/#com_val_mi","text":"Limitation of command speed for axis A1..A6 and external axis E1..E6 Name Type Unit Constraint $COM_VAL_MI[] REAL[12] Comments ... Notes 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9","title":"$COM_VAL_MI[]"},{"location":"krl/reference/system.variables/#conf_mess","text":"Signal declaration for reset acknowledgement messages . Name Type $CONF_MESS SIGNAL Comments ... Notes External confirmation \ue3c9","title":"$CONF_MESS"},{"location":"krl/reference/system.variables/#cosys","text":"Coordinate system for jogging Name Type Constraint $COSYS COSYS #AX , #CAR \ue3c9","title":"$COSYS"},{"location":"krl/reference/system.variables/#count_i","text":"Freely usable integer variables Name Type Unit Constraint $COUNT_I[] INT[32] Comments ... Notes Used as counters in the VW package \ue3c9","title":"$COUNT_I[]"},{"location":"krl/reference/system.variables/#coup_comp","text":"Axis coupling factors Name Type $COUP_COMP[,] FRA [6,6] \ue3c9","title":"$COUP_COMP[,]"},{"location":"krl/reference/system.variables/#cp_vel_type","text":"Reduction of the CP path velocity Name Type Constraint $CP_VEL_TYPE COSYS #AX , #CAR Comments ... Notes If the axis limit values are exceeded, the CP velocity is reduced. Reduction is always active in Cartesian jogging. \ue3c9","title":"$CP_VEL_TYPE"},{"location":"krl/reference/system.variables/#cp_vel_type_1","text":"Reduction of the CP path velocity Name Type Constraint $CP_VEL_TYPE CP_VEL_TYPE #CONSTANT , #VAR_T1 , #VAR_ALL Comments ... Notes If the axis limit values are exceeded, the CP velocity is reduced. Reduction is always active in Cartesian jogging. \ue3c9","title":"$CP_VEL_TYPE"},{"location":"krl/reference/system.variables/#cpvelredmeld","text":"Generation of message if path velocity reduced Name Type Unit Constraint $CPVELREDMELD INT Comments ... Notes The message contains the point name and the maximum reduction in the specific motion command. 0 : Generation of message deactivated. 1 : Generation of message in the event of block change in jog mode. 100 : Generation of message in the event of block change in all modes. \ue3c9","title":"$CPVELREDMELD"},{"location":"krl/reference/system.variables/#curr_act","text":"Actual current of axes Name Type Unit Constraint $CURR_ACT[] REAL[12] % [-100,100] Comments ... Notes Current value of current of axes A1..A6 and external axes E1..E6 in percentage of maximum servo drive module current $CURR_MAX (-100% to +100%). 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9","title":"$CURR_ACT[]"},{"location":"krl/reference/system.variables/#curr_cal","text":"Current calibration of axis in the power module Name Type Unit Constraint $CURR_CAL[] REAL[12] Comments ... Notes For KRC 1a and KRC 2 : calibration = 1 . 1 : High power 2 : Medium / low power 4 : Low power 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9","title":"$CURR_CAL[]"},{"location":"krl/reference/system.variables/#curr_com_ex","text":"Current limitation for external axes in jog mode Name Type Unit Constraint $CURR_COM_EX[] REAL[6] Comments ... Notes 1..6 : external axis E1..E6 \ue3c9","title":"$CURR_COM_EX[]"},{"location":"krl/reference/system.variables/#curr_lim","text":"Current limitation Name Type Unit Constraint $CURR_LIM[] INT[12] % [0,100] Comments ... Notes 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9","title":"$CURR_LIM[]"},{"location":"krl/reference/system.variables/#curr_max","text":"Maximum effective current on power module output Name Type Unit Constraint $CURR_MAX[] REAL[12] A Comments ... Notes Effective current must be present 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9","title":"$CURR_MAX[]"},{"location":"krl/reference/system.variables/#curr_mon","text":"Permissible rated current Name Type Unit Constraint $CURR_MON[] REAL[12] Comments ... Notes Defines the limit for i 2 x t monitoring for 55\u00b0C 1..6 : axis A1..A6 7..12 : external axis E1..E6 \ue3c9","title":"$CURR_MON[]"},{"location":"krl/reference/system.variables/#curr_red","text":"Current limitation for axes in % of the maximum current Name Type Unit Constraint $CURR_RED[,] REAL[12,2] Comments ... Notes [1..6,:] : axis A1..A6 [7..12,:] : external axis E1..E6 [:,1] : positive limit [:,2] : negative limit \ue3c9","title":"$CURR_RED[,]"},{"location":"krl/reference/system.variables/#cyc_defi","text":"Input text for the corresponding cyclical flag Name Type $CYC_DEFi[] CHAR[470] Comments ... Notes i in [1,32] \ue3c9","title":"$CYC_DEFi[]"},{"location":"krl/reference/system.variables/#cycflag","text":"Cyclical flags Name Type $CYCFLAG[] BOOL[32] Comments ... Notes There are 32 cyclical flags available. These flags are cyclically updated independently of program execution. The default value is false . \ue3c9","title":"$CYCFLAG[]"},{"location":"krl/reference/system.variables/#ov_pro","text":"Program override Name Type Unit Constraint $OV_PRO INT % [0, 100] Comments ... Notes Program override is the velocity of the robot during program execution. The program override is specified as a percentage of the programmed velocity. In T1 mode, the maximum velocity is 250 mm/s, irrespective of the value that is set. \ue3c9","title":"$OV_PRO"},{"location":"krl/reference/system.variables/#pro_mode","text":"Program run mode dependent on $INTERPRETER Name Type Constraint $PRO_MODE PRO_MODE #ISTEP , #PSTEP , #MSTEP , #CSTEP , #GO , #BSTEP \ue3c9","title":"$PRO_MODE"},{"location":"krl/reference/system.variables/#pro_mode0","text":"Program run mode of the SUBMIT interpreter Name Type Constraint $PRO_MODE0 PRO_MODE #ISTEP , #PSTEP , #MSTEP , #CSTEP , #GO , #BSTEP \ue3c9","title":"$PRO_MODE0"},{"location":"krl/reference/system.variables/#pro_mode1","text":"Program run mode of the ROBOT interpreter Name Type Constraint $PRO_MODE1 PRO_MODE #ISTEP , #PSTEP , #MSTEP , #CSTEP , #GO , #BSTEP \ue3c9","title":"$PRO_MODE1"},{"location":"krl/reference/system.variables/#pro_name0","text":"Process name of the SUBMIT interpreter Name Type $PRO_NAME0[] CHAR[24] \ue3c9","title":"$PRO_NAME0[]"},{"location":"krl/reference/system.variables/#pro_name1","text":"Process name of the ROBOT interpreter Name Type $PRO_NAME1[] CHAR[24] \ue3c9","title":"$PRO_NAME1[]"},{"location":"krl/reference/system.variables/#pro_name","text":"Process name dependent on $INTERPRETER Name Type $PRO_NAME[] CHAR[24] \ue3c9","title":"$PRO_NAME[]"},{"location":"krl/reference/system.variables/#pro_state","text":"Process state dependent on $INTERPRETER Name Type Constraint $PRO_STATE PRO_STATE #P_FREE , #P_RESET , #P_ACTIVE , #P_STOP , #P_END \ue3c9","title":"$PRO_STATE"},{"location":"krl/reference/system.variables/#pro_state0","text":"Process state of the SUBMIT interpreter Name Type Constraint $PRO_STATE0 PRO_STATE #P_FREE , #P_RESET , #P_ACTIVE , #P_STOP , #P_END \ue3c9","title":"$PRO_STATE0"},{"location":"krl/reference/system.variables/#pro_state1","text":"Process state of the ROBOT interpreter Name Type Constraint $PRO_STATE1 PRO_STATE #P_FREE , #P_RESET , #P_ACTIVE , #P_STOP , #P_END function withTitleAttributeContent(tippy) { return (targets, options = {}) => tippy(targets, { ...options, content(reference) { if (options.content) { return options.content } const title = reference.getAttribute('title') reference.removeAttribute('title') return title } }) } window.tippy = withTitleAttributeContent(tippy) tippy('.tippy', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, }) tippy('.tippy-toc', { placement: 'top', arrow: true, arrowType: 'sharp', // or 'sharp' (default) size: 'small', // \"small\", \"regular\", \"large\" interactive: true, })","title":"$PRO_STATE1"}]}