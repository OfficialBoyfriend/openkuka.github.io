{% import 'macros_common.j2' as common with context %}

{# show_type #}
{% macro show_type(enum) %}
{% set name = enum.name %}
{% set description = enum.description %}
{% set dtype = enum['data-type'] %}
{% set values = enum['values'] %}

{{ common.show_node_title(name) }}
*{{ description | markdown }}*

<table>
    <thead>
        <tr>
        <th style="min-width:12em">Name</th>
        <th style="min-width:12em">Type</th>
        </tr>
    </thead>
    <tbody>
        <tr>
        <td><code>{{ name }}</code></td>
        <td><code>{{ dtype }}</code></td>
        </tr>
    </tbody>
</table>

<table>
    <thead>
        <tr>
        <th style="min-width:12em">Value</th>
        <th>Description</th>
        </tr>
    </thead>
    <tbody>
    {% for value in values %}
        {% set dtype = value['data-type'] %}
        <tr>
            <td><code>#{{ value.name }}</code></td>
            <td>{{ value.description | markdown }}</td>
        </tr>
    {% endfor %}
    </tbody>
</table>

{% endmacro %}


{# show_var #}
{% macro show_var(enum) %}
{% set name = enum.name %}
{% set namespace = enum.namespace %}
{% set description = enum.description %}
{% set dtype = enum['data-type'] %}
{% set type = enum['type'] %}

{{ common.show_node_title(name) }}
*{{ description | markdown }}*

<table>
    <thead>
        <tr>
        <th style="min-width:12em">Name</th>
        <th style="min-width:12em">Type</th>
        <th>Constraint</th>
        </tr>
    </thead>
    <tbody>
        <tr>
        <td><code>{{ name }}</code></td>
        <td><code>{{ common.get_typelink(type) }}</code></td>
        <td>{{ show_enumlist(type) }} </td>
        </tr>
    </tbody>
</table>

{{ common.show_details(enum['comments'], enum['code-sample']) }}

{% endmacro %}

{% macro show_enumlist(type) %}
    {% set node = xref[type]['value'] %}
    {%- for value in node['values'] -%}
        <span class="tippy" data-tippy-content="{{ value['description'] | markdown }}" title="#{{ value['name'] | upper }} : {{ value['description'] }}"><code>#{{ value['name'] | upper }}</code></span>{{ ' ,'  if not loop.last }}
    {%- endfor -%}
{% endmacro %}
